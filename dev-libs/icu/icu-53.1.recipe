SUMMARY="International Components for Unicode (ICU)"
HOMEPAGE="http://www.icu-project.org"
LICENSE="ICU"
COPYRIGHT="1997-2014 IBM Corporation and others."
SRC_URI="http://download.icu-project.org/files/icu4c/$portVersion/icu4c-53_1-src.tgz"
CHECKSUM_SHA256="6fa74fb5aac070c23eaba1711a7178fe582c59867484c5ec07c49002787a9a28"
REVISION="3"
ARCHITECTURES="x86_gcc2 x86 x86_64 arm"
SECONDARY_ARCHITECTURES="x86_gcc2 x86"

PROVIDES="
	icu$secondaryArchSuffix = $portVersion compat >= 53
	lib:libicudata$secondaryArchSuffix = 53.1 compat >= 53
	lib:libicui18n$secondaryArchSuffix = 53.1 compat >= 53
	lib:libicuio$secondaryArchSuffix = 53.1 compat >= 53
	lib:libicule$secondaryArchSuffix = 53.1 compat >= 53
	lib:libiculx$secondaryArchSuffix = 53.1 compat >= 53
	lib:libicutest$secondaryArchSuffix = 53.1 compat >= 53
	lib:libicutu$secondaryArchSuffix = 53.1 compat >= 53
	lib:libicuuc$secondaryArchSuffix = 53.1 compat >= 53
	"
REQUIRES="
	haiku$secondaryArchSuffix >= $haikuVersion
	lib:libstdc++$secondaryArchSuffix
	"
if [ $effectiveTargetArchitecture != x86_gcc2 ]; then
REQUIRES+="
	lib:libgcc_s$secondaryArchSuffix
"
fi
BUILD_REQUIRES="
	"
BUILD_PREREQUIRES="
	haiku${secondaryArchSuffix}_devel >= $haikuVersion
	cmd:autoconf
	cmd:awk
	cmd:gcc$secondaryArchSuffix
	cmd:ld$secondaryArchSuffix
	cmd:make
	cmd:sed
	"

SOURCE_DIR="icu"
PATCHES="icu-53.1.patchset"

BUILD()
{
	cd source
	autoconf
	runConfigure ./configure \
		--disable-renaming --disable-samples --disable-extras
	make $jobArgs
}

INSTALL()
{
	cd source
	make install

	prepareInstalledDevelLibs \
		libicudata \
		libicui18n \
		libicuio \
		libicule \
		libiculx \
		libicutu \
		libicuuc
	fixPkgconfig

	# Rename the data/icu directory when built for the secondary architecture,
	# so that it doesn't clash with the primary package's.
	if [ -n "$secondaryArchSuffix" ]; then
		mv $dataDir/icu $dataDir/icu$secondaryArchSuffix
		# TODO: The icu-config, the Makefile.inc, and possibly other files need
		# to be adjusted as well. They are probably also not quite correct for
		# the primary architecture (lib vs. develop/lib).
	fi

	# devel package
	packageEntries devel \
		$developDir \
		$dataDir \
		$libDir/icu \
		$binDir/icu-config

	# main package cleanup
	rm -r $binDir
}

TEST()
{
	cd source
	make check
}

DESCRIPTION="
ICU is a mature, widely used set of C/C++ and Java libraries providing Unicode \
and Globalization support for software applications. ICU is widely portable \
and gives applications the same results on all platforms and between C/C++ and \
Java software.
ICU is released under a nonrestrictive open source license that is suitable \
for use with both commercial software and with other open source or free \
software.
Here are a few highlights of the services provided by ICU:
* Code Page Conversion: Convert text data to or from Unicode and nearly any \
other character set or encoding. ICU's conversion tables are based on charset \
data collected by IBM over the course of many decades, and is the most \
complete available anywhere.
* Collation: Compare strings according to the conventions and standards of a \
particular language, region or country. ICU's collation is based on the \
Unicode Collation Algorithm plus locale-specific comparison rules from the \
Common Locale Data Repository, a comprehensive source for this type of data.
* Formatting: Format numbers, dates, times and currency amounts according the \
conventions of a chosen locale. This includes translating month and day names \
into the selected language, choosing appropriate abbreviations, ordering \
fields correctly, etc. This data also comes from the Common Locale Data \
Repository.
* Time Calculations: Multiple types of calendars are provided beyond the \
traditional Gregorian calendar. A thorough set of timezone calculation APIs \
are provided.
* Unicode Support: ICU closely tracks the Unicode standard, providing easy \
access to all of the many Unicode character properties, Unicode Normalization, \
Case Folding and other fundamental operations as specified by the Unicode \
Standard.
* Regular Expression: ICU's regular expressions fully support Unicode while \
providing very competitive performance.
* Bidi: support for handling text containing a mixture of left to right \
(English) and right to left (Arabic or Hebrew) data.
* Text Boundaries: Locate the positions of words, sentences, paragraphs within \
a range of text, or identify locations that would be suitable for line \
wrapping when displaying the text.
"

# ----- devel package -------------------------------------------------------

SUMMARY_devel="The ICU development files"
PROVIDES_devel="
	icu${secondaryArchSuffix}_devel = $portVersion
	cmd:icu_config${secondaryArchSuffix} = $portVersion compat >= 53
	devel:libicudata${secondaryArchSuffix} = 53.1 compat >= 53
	devel:libicui18n${secondaryArchSuffix} = 53.1 compat >= 53
	devel:libicuio${secondaryArchSuffix} = 53.1 compat >= 53
	devel:libicule${secondaryArchSuffix} = 53.1 compat >= 53
	devel:libiculx${secondaryArchSuffix} = 53.1 compat >= 53
	devel:libicutest${secondaryArchSuffix} = 53.1 compat >= 53
	devel:libicutu${secondaryArchSuffix} = 53.1 compat >= 53
	devel:libicuuc${secondaryArchSuffix} = 53.1 compat >= 53
	"
REQUIRES_devel="
	icu${secondaryArchSuffix} == $portVersion base
	"
