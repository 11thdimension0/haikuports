From 1b692403e242c2383cb1055e5fac6d3014920993 Mon Sep 17 00:00:00 2001
From: Adrien Destugues <pulkomandy@pulkomandy.tk>
Date: Tue, 15 Jul 2014 19:39:16 +0200
Subject: Replace "local" with "static".


diff --git a/bld/cc/c/cexpr.c b/bld/cc/c/cexpr.c
index 9cbb2cf..2333caf 100644
--- a/bld/cc/c/cexpr.c
+++ b/bld/cc/c/cexpr.c
@@ -50,26 +50,26 @@ struct mathfuncs {
     { NULL,      0, 0 }
 };
 
-local   TREEPTR GenNextParm(TREEPTR,TYPEPTR **);
-local   TREEPTR StartFunc(TREEPTR,TYPEPTR **);
-local   TREEPTR GetExpr(void);
-local   TREEPTR ExprId(void);
-local   TREEPTR ExprOpnd(void);
-local   TREEPTR SizeofOp(TYPEPTR);
-local   TREEPTR ScalarExpr(TREEPTR);
-local   TREEPTR UnaryPlus(TREEPTR);
-local   TREEPTR TernOp(TREEPTR,TREEPTR,TREEPTR);
-local   TREEPTR ColonOp(TREEPTR);
-local   TREEPTR StartTernary(TREEPTR);
-local   TREEPTR NotOp(TREEPTR);
-local   TREEPTR AndAnd(TREEPTR);
-local   TREEPTR OrOr(TREEPTR);
-local   TREEPTR GenFuncCall(TREEPTR);
-local   TREEPTR IndexOp(TREEPTR,TREEPTR);
-local   TREEPTR SegOp(TREEPTR,TREEPTR);
-local      void PopNestedParms( TYPEPTR **plistptr );
-local      void IncSymWeight( SYMPTR sym );
-local      void AddCallNode( TREEPTR tree );
+static   TREEPTR GenNextParm(TREEPTR,TYPEPTR **);
+static   TREEPTR StartFunc(TREEPTR,TYPEPTR **);
+static   TREEPTR GetExpr(void);
+static   TREEPTR ExprId(void);
+static   TREEPTR ExprOpnd(void);
+static   TREEPTR SizeofOp(TYPEPTR);
+static   TREEPTR ScalarExpr(TREEPTR);
+static   TREEPTR UnaryPlus(TREEPTR);
+static   TREEPTR TernOp(TREEPTR,TREEPTR,TREEPTR);
+static   TREEPTR ColonOp(TREEPTR);
+static   TREEPTR StartTernary(TREEPTR);
+static   TREEPTR NotOp(TREEPTR);
+static   TREEPTR AndAnd(TREEPTR);
+static   TREEPTR OrOr(TREEPTR);
+static   TREEPTR GenFuncCall(TREEPTR);
+static   TREEPTR IndexOp(TREEPTR,TREEPTR);
+static   TREEPTR SegOp(TREEPTR,TREEPTR);
+static      void PopNestedParms( TYPEPTR **plistptr );
+static      void IncSymWeight( SYMPTR sym );
+static      void AddCallNode( TREEPTR tree );
 
 extern    int64 LongValue64( TREEPTR leaf );
 
@@ -298,7 +298,7 @@ TREEPTR LongLeaf( target_long value )
     return( leaf );
 }
 
-local TREEPTR EnumLeaf( ENUMPTR ep )
+static TREEPTR EnumLeaf( ENUMPTR ep )
 {
     DATA_TYPE   decl_type;
     TREEPTR     leaf;
@@ -439,7 +439,7 @@ TREEPTR SymLeaf( void )
 }
 
 
-local void IncSymWeight( SYMPTR sym )
+static void IncSymWeight( SYMPTR sym )
 {
     static int  LoopWeights[] = { 1, 0x10, 0x100, 0x1000 };
 
@@ -499,7 +499,7 @@ static bool IsCallValue( TREEPTR tree )
 }
 
 // This RVALUE thing is backwards -mjc
-local TREEPTR TakeRValue( TREEPTR tree, int void_ok )
+static TREEPTR TakeRValue( TREEPTR tree, int void_ok )
 {
     TYPEPTR             typ;
     sym_flags           symb_flags;
@@ -953,7 +953,7 @@ FIELDPTR SearchFields( TYPEPTR *class_typ, target_size *field_offset, const char
 }
 
 
-local TYPEPTR Ptr2Struct( TYPEPTR typ )
+static TYPEPTR Ptr2Struct( TYPEPTR typ )
 {
     if( typ->decl_type != TYPE_POINTER ) {
         return( NULL );
@@ -1170,7 +1170,7 @@ TREEPTR SingleExpr( void )
 }
 
 
-local TREEPTR GetExpr( void )
+static TREEPTR GetExpr( void )
 {
     TREEPTR     tree, op1;
     TYPEPTR     typ;
@@ -1454,7 +1454,7 @@ local TREEPTR GetExpr( void )
 }
 
 
-local TREEPTR ExprOpnd( void )
+static TREEPTR ExprOpnd( void )
 {
     TREEPTR     tree;
     TYPEPTR     typ;
@@ -1617,7 +1617,7 @@ local TREEPTR ExprOpnd( void )
 }
 
 
-local bool IsMacroDefined( void )
+static bool IsMacroDefined( void )
 {
     MEPTR       mentry;
 
@@ -1634,7 +1634,7 @@ local bool IsMacroDefined( void )
 }
 
 
-local TREEPTR ExprId( void )
+static TREEPTR ExprId( void )
 {
     TREEPTR     tree;
     int         value;
@@ -1691,7 +1691,7 @@ local TREEPTR ExprId( void )
 
 
 #if 0
-local bool LValueArray( TREEPTR tree )
+static bool LValueArray( TREEPTR tree )
 {
     TYPEPTR     typ;
 
@@ -1710,7 +1710,7 @@ local bool LValueArray( TREEPTR tree )
 }
 #endif
 
-local TREEPTR GenIndex( TREEPTR tree, TREEPTR index_expr )
+static TREEPTR GenIndex( TREEPTR tree, TREEPTR index_expr )
 {
     TYPEPTR         typ;
     op_flags        tree_flags;
@@ -1774,14 +1774,14 @@ local TREEPTR GenIndex( TREEPTR tree, TREEPTR index_expr )
     return( tree );
 }
 
-local TREEPTR ArrayIndex( TREEPTR tree, TREEPTR index_expr )
+static TREEPTR ArrayIndex( TREEPTR tree, TREEPTR index_expr )
 {
     tree = GenIndex( tree, index_expr );
     return( tree );
 }
 
 
-local TREEPTR IndexOp( TREEPTR tree, TREEPTR index_expr )
+static TREEPTR IndexOp( TREEPTR tree, TREEPTR index_expr )
 {
     TYPEPTR     typ;
 
@@ -1810,7 +1810,7 @@ local TREEPTR IndexOp( TREEPTR tree, TREEPTR index_expr )
     return( tree );
 }
 
-local void AddCallNode( TREEPTR tree )
+static void AddCallNode( TREEPTR tree )
 // if a function call has no prototype wait till end
 // to check it out
 {
@@ -1852,7 +1852,7 @@ static int ParmNum( void )
     return( parm_count );
 }
 
-local TREEPTR GenNextParm( TREEPTR tree, TYPEPTR **plistptr )
+static TREEPTR GenNextParm( TREEPTR tree, TYPEPTR **plistptr )
 {
     TYPEPTR     *plist;
     TYPEPTR     typ;
@@ -1923,7 +1923,7 @@ local TREEPTR GenNextParm( TREEPTR tree, TYPEPTR **plistptr )
 }
 
 
-local bool IntrinsicMathFunc( SYM_NAMEPTR sym_name, int i, size_t len, SYMPTR sym )
+static bool IntrinsicMathFunc( SYM_NAMEPTR sym_name, int i, size_t len, SYMPTR sym )
 {
     size_t  j;
 
@@ -1946,7 +1946,7 @@ local bool IntrinsicMathFunc( SYM_NAMEPTR sym_name, int i, size_t len, SYMPTR sy
 #else
     #define REG_SIZE    4
 #endif
-local TREEPTR GenVaStartNode( TREEPTR last_parm )
+static TREEPTR GenVaStartNode( TREEPTR last_parm )
 {
     // there should be 3 parms __builtin_va_start( list, parm_name, stdarg )
     // - first parm should be name of va_list
@@ -1999,7 +1999,7 @@ local TREEPTR GenVaStartNode( TREEPTR last_parm )
     return( tree );
 }
 
-local TREEPTR GenAllocaNode( TREEPTR size_parm )
+static TREEPTR GenAllocaNode( TREEPTR size_parm )
 {
     // there should be 1 parm __builtin_alloca( size )
     TREEPTR     tree;
@@ -2016,7 +2016,7 @@ local TREEPTR GenAllocaNode( TREEPTR size_parm )
 #endif
 
 #if _CPU == _PPC
-local TREEPTR GenVaArgNode( TREEPTR last_parm )
+static TREEPTR GenVaArgNode( TREEPTR last_parm )
 {
     // there should be 2 parms __builtin_varg( list, type_arg )
     // - first parm should be name of va_list
@@ -2049,7 +2049,7 @@ local TREEPTR GenVaArgNode( TREEPTR last_parm )
 }
 #endif
 
-local TREEPTR GenFuncCall( TREEPTR last_parm )
+static TREEPTR GenFuncCall( TREEPTR last_parm )
 {
     expr_level_type i;
     expr_level_type n;
@@ -2201,7 +2201,7 @@ done_call:
     return( tree );
 }
 
-local void PopNestedParms( TYPEPTR **plistptr )
+static void PopNestedParms( TYPEPTR **plistptr )
 {
     struct nested_parm_lists    *npl;
 
@@ -2231,7 +2231,7 @@ static TREEPTR DummyFuncName( void )
     return( tree );
 }
 
-local TREEPTR StartFunc( TREEPTR tree, TYPEPTR **plistptr )
+static TREEPTR StartFunc( TREEPTR tree, TYPEPTR **plistptr )
 {
     TYPEPTR             typ;
     TYPEPTR             orig_typ;
@@ -2378,7 +2378,7 @@ local TREEPTR StartFunc( TREEPTR tree, TYPEPTR **plistptr )
 }
 
 
-local TREEPTR OrOr( TREEPTR tree )
+static TREEPTR OrOr( TREEPTR tree )
 {
     // This routine is called when || token is found
     if( tree->op.opr == OPR_PUSHINT ) {
@@ -2391,7 +2391,7 @@ local TREEPTR OrOr( TREEPTR tree )
 }
 
 
-local TREEPTR AndAnd( TREEPTR tree )
+static TREEPTR AndAnd( TREEPTR tree )
 {
     // This routine is called when && token is found
     if( tree->op.opr == OPR_PUSHINT ) {
@@ -2439,7 +2439,7 @@ TREEPTR BoolExpr( TREEPTR tree )
 }
 
 
-local TREEPTR NotOp( TREEPTR tree )
+static TREEPTR NotOp( TREEPTR tree )
 {
     TREEPTR     opnd;
     FLOATVAL    *flt;
@@ -2492,14 +2492,14 @@ local TREEPTR NotOp( TREEPTR tree )
 }
 
 
-local TREEPTR StartTernary( TREEPTR tree )
+static TREEPTR StartTernary( TREEPTR tree )
 {
     tree = BoolExpr( tree );
     return( tree );
 }
 
 
-local TREEPTR ColonOp( TREEPTR true_part )
+static TREEPTR ColonOp( TREEPTR true_part )
 {
     if( Class[ExprLevel] != TC_TERNARY ) {
         CErr1( ERR_MISSING_QUESTION_OR_MISPLACED_COLON );
@@ -2574,7 +2574,7 @@ static TREEPTR TernOp( TREEPTR expr1, TREEPTR true_part, TREEPTR false_part )
 }
 
 
-local TREEPTR UnaryPlus( TREEPTR tree )
+static TREEPTR UnaryPlus( TREEPTR tree )
 {
     TYPEPTR     typ;
 
@@ -2627,7 +2627,7 @@ TREEPTR ScalarExpr( TREEPTR tree )
 }
 
 
-local TREEPTR SizeofOp( TYPEPTR typ )
+static TREEPTR SizeofOp( TYPEPTR typ )
 {
     TREEPTR             tree;
     target_size         size;
@@ -2658,7 +2658,7 @@ local TREEPTR SizeofOp( TYPEPTR typ )
     return( tree );
 }
 
-local TREEPTR SegOp( TREEPTR seg, TREEPTR offset )
+static TREEPTR SegOp( TREEPTR seg, TREEPTR offset )
 {
     TREEPTR     tree;
     TYPEPTR     typ;
diff --git a/bld/cc/c/cmac2.c b/bld/cc/c/cmac2.c
index 232b456..bea45a7 100644
--- a/bld/cc/c/cmac2.c
+++ b/bld/cc/c/cmac2.c
@@ -51,8 +51,8 @@ static void    CLine( void );
 static void    CError( void );
 static void    CIdent( void );
 
-local void GrabTokens( mac_parm_count parm_count, macro_flags mflags, MPPTR formal_parms, const char *mac_name, source_loc *src_loc );
-local mac_parm_count FormalParm( MPPTR formal_parms );
+static void GrabTokens( mac_parm_count parm_count, macro_flags mflags, MPPTR formal_parms, const char *mac_name, source_loc *src_loc );
+static mac_parm_count FormalParm( MPPTR formal_parms );
 
 struct preproc {
     char  *directive;
@@ -107,7 +107,7 @@ static void PPFlush2EOL( void )
 }
 
 
-local void ChkEOL( void )
+static void ChkEOL( void )
 {
     if( CurToken != T_EOF ) {
         ExpectingToken( T_NULL );
@@ -115,7 +115,7 @@ local void ChkEOL( void )
 }
 
 
-local void WantEOL( void )
+static void WantEOL( void )
 {
     if( CompFlags.extensions_enabled ) {
         if( CurToken != T_NULL && CurToken != T_EOF ) {
@@ -129,7 +129,7 @@ local void WantEOL( void )
 }
 
 
-local void IncLevel( bool value )
+static void IncLevel( bool value )
 {
     struct cpp_info *cpp;
 
@@ -150,7 +150,7 @@ local void IncLevel( bool value )
 }
 
 
-local void CUnknown( void )
+static void CUnknown( void )
 {
     if( NestLevel == SkipLevel ) {
         CErr2p( ERR_UNKNOWN_DIRECTIVE, Buffer );
@@ -244,18 +244,18 @@ TOKEN ChkControl( void )
 }
 
 
-local void CSkip( void )
+static void CSkip( void )
 {
 }
 
 
-local void CSkipIf( void )
+static void CSkipIf( void )
 {
     IncLevel( FALSE );
 }
 
 
-local void CIdent( void )
+static void CIdent( void )
 {
     if( !CompFlags.extensions_enabled ) {
         CUnknown();
@@ -319,7 +319,7 @@ void CInclude( void )
 }
 
 
-local void CDefine( void )
+static void CDefine( void )
 {
     MPPTR           mp;
     MPPTR           prev_mp;
@@ -406,7 +406,7 @@ local void CDefine( void )
 }
 
 
-local void GrabTokens( mac_parm_count parm_count, macro_flags mflags, MPPTR formal_parms, const char *mac_name, source_loc *loc )
+static void GrabTokens( mac_parm_count parm_count, macro_flags mflags, MPPTR formal_parms, const char *mac_name, source_loc *loc )
 {
     MEPTR           mentry;
     size_t          len;
@@ -524,7 +524,7 @@ local void GrabTokens( mac_parm_count parm_count, macro_flags mflags, MPPTR form
 }
 
 
-local mac_parm_count FormalParm( MPPTR formal_parms )
+static mac_parm_count FormalParm( MPPTR formal_parms )
 {
     mac_parm_count i;
 
@@ -539,7 +539,7 @@ local mac_parm_count FormalParm( MPPTR formal_parms )
 }
 
 
-local void CIfDef( void )
+static void CIfDef( void )
 {
     MEPTR       mentry;
 
@@ -561,7 +561,7 @@ local void CIfDef( void )
 }
 
 
-local void CIfNDef( void )
+static void CIfNDef( void )
 {
     MEPTR       mentry;
 
@@ -582,7 +582,7 @@ local void CIfNDef( void )
 }
 
 
-local bool GetConstExpr( void )
+static bool GetConstExpr( void )
 {
     bool        value;
     bool        useful_side_effect;
@@ -603,7 +603,7 @@ local bool GetConstExpr( void )
     return( value );
 }
 
-local void CIf( void )
+static void CIf( void )
 {
     bool    value;
 
@@ -616,7 +616,7 @@ local void CIf( void )
 }
 
 
-local void CElif( void )
+static void CElif( void )
 {
     bool    value;
 
@@ -646,7 +646,7 @@ local void CElif( void )
 }
 
 
-local void CElse( void )
+static void CElse( void )
 {
     if( ( NestLevel == 0 ) || ( CppStack->cpp_type == PRE_ELSE ) ) {
         CErr1( ERR_MISPLACED_ELSE );
@@ -668,7 +668,7 @@ local void CElse( void )
 }
 
 
-local void CEndif( void )
+static void CEndif( void )
 {
     if( NestLevel == 0 ) {
         CErr1( ERR_MISPLACED_ENDIF );
@@ -733,7 +733,7 @@ bool MacroDel( const char *name )
 }
 
 
-local void CUndef( void )
+static void CUndef( void )
 {
 
     PPNextToken();
@@ -745,7 +745,7 @@ local void CUndef( void )
 }
 
 
-local void CLine( void )
+static void CLine( void )
 {
     FNAMEPTR        flist;
     unsigned        src_line;
@@ -791,7 +791,7 @@ local void CLine( void )
 }
 
 
-local void CError( void )
+static void CError( void )
 {
     size_t      len;
     bool        save;
diff --git a/bld/cc/master.mif b/bld/cc/master.mif
index 45a69b5..0ac6a97 100644
--- a/bld/cc/master.mif
+++ b/bld/cc/master.mif
@@ -53,7 +53,7 @@ pre_obj_deps += code$(target_cpu).gh
 #
 # C compiler options
 #
-extra_cpp_flags = -Dlocal=static
+extra_cpp_flags = -Dlocal="static"
 !ifneq cc_dll 1
 extra_cpp_flags += -DIDE_PGM
 !endif
-- 
1.8.3.4


From eda63ead29387368ea13473af964ada010826c8e Mon Sep 17 00:00:00 2001
From: Adrien Destugues <pulkomandy@gmail.com>
Date: Sun, 18 Jan 2015 15:35:30 +0100
Subject: Adjust setvars.sh to Haiku build environment.


diff --git a/setvars.sh b/setvars.sh
index a64d135..30bce44 100755
--- a/setvars.sh
+++ b/setvars.sh
@@ -6,14 +6,14 @@
 #       modify it as necessary for your own use!!
 
 # Change this to point your Open Watcom source tree
-export OWROOT=/home/ow/ow
+export OWROOT=/sources/openwatcom-2.0.0
 
 # Subdirectory to be used for building OW build tools
 export OWOBJDIR=binbuild
 
 # Set this entry to identify your toolchain used by build process
 # supported values are WATCOM GCC CLANG
-export OWTOOLS=WATCOM
+export OWTOOLS=GCC
 
 # Documentation related variables
 
-- 
1.8.3.4


From a720938fa74b28394287eb1c4f13804520089948 Mon Sep 17 00:00:00 2001
From: Adrien Destugues <pulkomandy@gmail.com>
Date: Mon, 19 Jan 2015 19:36:32 +0100
Subject: loadfind: long is 32-bit, off_t might be 64bit

Use the proper type to get the correct sign expansion effect.

diff --git a/bld/wres/c/loadfind.c b/bld/wres/c/loadfind.c
index 28b9529..c94ae26 100644
--- a/bld/wres/c/loadfind.c
+++ b/bld/wres/c/loadfind.c
@@ -61,7 +61,7 @@ unsigned char FindResources( PHANDLE_INFO hInstance )
 /* look for the resource information in a debugger record at the end of file */
 {
     long        currpos;
-    long        offset;
+    off_t        offset;
     dbgheader   header;
     bool        notfound;
     char        buffer[sizeof( PATCH_LEVEL )];
@@ -69,7 +69,7 @@ unsigned char FindResources( PHANDLE_INFO hInstance )
     notfound = true;
     FileShift = 0;
     offset = sizeof( dbgheader );
-    if( WRESSEEK( hInstance->handle, -(long)sizeof( PATCH_LEVEL ), SEEK_END ) != -1 ) {
+    if( WRESSEEK( hInstance->handle, -(off_t)sizeof( PATCH_LEVEL ), SEEK_END ) != -1 ) {
         if( WRESREAD( hInstance->handle, buffer, sizeof( PATCH_LEVEL ) ) == sizeof( PATCH_LEVEL ) ) {
             if( memcmp( buffer, PATCH_LEVEL, PATCH_LEVEL_HEAD_SIZE ) == 0 ) {
                 offset += sizeof( PATCH_LEVEL );
-- 
1.8.3.4


From 48aea848589760809e793b3f38af51fc4c0dd313 Mon Sep 17 00:00:00 2001
From: Adrien Destugues <pulkomandy@gmail.com>
Date: Mon, 19 Jan 2015 22:44:26 +0100
Subject: Fix local.mif for Haiku.

* It was still referencing BSD from which it was copied, resulting in
broken build.

diff --git a/build/mif/local.mif b/build/mif/local.mif
index 1990b94..4537b76 100644
--- a/build/mif/local.mif
+++ b/build/mif/local.mif
@@ -453,7 +453,7 @@ bld_cl_sys =
 
 bld_incs = $(bld_extra_incs) -I"$(watcom_dir)/h"
 
-bld_cppflags = $(common_cppflags_bsd) $(common_cppflags_$(bld_cpu))
+bld_cppflags = $(common_cppflags_haiku) $(common_cppflags_$(bld_cpu))
 
 bld_cflags   = $(common_cflags) $(common_flags) -o $@
 
@@ -485,8 +485,8 @@ cl  = gcc -pipe
 
 librarian = ar
 
-cppflags_bsd   = $(common_cppflags_bsd)
-cppflags_osi   = $(common_cppflags_bsd)
+cppflags_haiku   = $(common_cppflags_haiku)
+cppflags_osi   = $(common_cppflags_haiku)
 cppflags_386   = $(common_cppflags_386)
 cppflags_ppc   = $(common_cppflags_ppc)
 cppflags_x64   = $(common_cppflags_x64)
-- 
1.8.3.4


From 4b0ebc440cc9f2b217c39f00f89cf2e280fc4bc1 Mon Sep 17 00:00:00 2001
From: Adrien Destugues <pulkomandy@gmail.com>
Date: Mon, 19 Jan 2015 22:45:36 +0100
Subject: makeinit, variety.h: Haiku support.

Not sure if this is needed, for symmetry with other systems only.

diff --git a/bld/lib_misc/h/variety.h b/bld/lib_misc/h/variety.h
index 241183e..7323caa 100644
--- a/bld/lib_misc/h/variety.h
+++ b/bld/lib_misc/h/variety.h
@@ -164,6 +164,16 @@
     #else
         #error unrecognized processor for Linux
     #endif
+#elif defined(__HAIKU__)
+    #define __PROTECT_MODE__
+    #define __UNIX__
+    #if defined(__386__)
+        #define __HAIKU_386__
+    #elif defined(__PPC__)
+        #define __HAIKU_PPC__
+    #else
+        #error unrecognized processor for Haiku
+    #endif
 #elif defined(__NETWARE__)
     #define __PROTECT_MODE__
     #if defined(__386__)
diff --git a/build/makeinit b/build/makeinit
index f9bc945..692675a 100644
--- a/build/makeinit
+++ b/build/makeinit
@@ -82,6 +82,17 @@ bld64host_osi = 1
 !else ifdef __BSDPPC__
 bld_cpu = ppc
 bld_os = bsd
+!else ifdef __HAIKU386__
+bld_cpu = 386
+bld_os = haiku
+!else ifdef __HAIKUX64__
+bld_cpu = x64
+bld_os = haiku
+bld64host_bsd = 1
+bld64host_osi = 1
+!else ifdef __HAIKUPPC__
+bld_cpu = ppc
+bld_os = haiku
 !endif
 
 !ifdef nulldevice_$(bld_os)
-- 
1.8.3.4


From 61579736f40c305f7e33642c17e36c4daad73094 Mon Sep 17 00:00:00 2001
From: Adrien Destugues <pulkomandy@gmail.com>
Date: Mon, 19 Jan 2015 22:46:14 +0100
Subject: walloca: silcene warning on Haiku

We already define __alloca in Haiku system headers, and this triggers a
warning during build.

diff --git a/bld/watcom/h/walloca.h b/bld/watcom/h/walloca.h
index 66a7ac8..6f70d1c 100644
--- a/bld/watcom/h/walloca.h
+++ b/bld/watcom/h/walloca.h
@@ -41,7 +41,7 @@
 #if !defined( __WATCOMC__ )
 #if defined( _MSC_VER )
     #define __alloca    _alloca
-#else
+#elif !defined(__HAIKU__)
     #define __alloca    alloca
 #endif
 #endif
-- 
1.8.3.4


From bfc9f3a6eab0dbc28d4eb91698842faa8fb94ac8 Mon Sep 17 00:00:00 2001
From: Adrien Destugues <pulkomandy@gmail.com>
Date: Mon, 19 Jan 2015 22:47:04 +0100
Subject: wl, builder: let makefiles know about Haiku

* We want the POSIX stuff used, otherwise there are undefined
references.

diff --git a/bld/builder/master.mif b/bld/builder/master.mif
index 6ce7918..2d7f651 100644
--- a/bld/builder/master.mif
+++ b/bld/builder/master.mif
@@ -36,6 +36,7 @@ inc_dirs = -I"../h" -I"$(pmake_dir)" -I"$(posix_dir)/h"
 sys_bsd   = sys.obj sysposix.obj
 sys_dos   = sys.obj sysdos.obj sysdoscd.obj
 sys_linux = sys.obj sysposix.obj
+sys_haiku = sys.obj sysposix.obj
 sys_nt    = sysnt.obj sysdoscd.obj
 sys_os2   = sys.obj sysos2.obj sysdoscd.obj
 
diff --git a/bld/wl/wlobjs.mif b/bld/wl/wlobjs.mif
index 7b50b4f..e1efd0b 100644
--- a/bld/wl/wlobjs.mif
+++ b/bld/wl/wlobjs.mif
@@ -125,6 +125,7 @@ wlink_ide_objs = $(_subdir_)idedrv.obj
 wlink_objs_dos   = $(_subdir_)linkio.obj
 wlink_objs_qnx   = $(_subdir_)posixio.obj
 wlink_objs_linux = $(_subdir_)posixio.obj
+wlink_objs_haiku = $(_subdir_)posixio.obj
 wlink_objs_osx   = $(_subdir_)posixio.obj
 wlink_objs_bsd   = $(_subdir_)posixio.obj
 wlink_objs_nt    = $(_subdir_)ntio.obj
-- 
1.8.3.4

