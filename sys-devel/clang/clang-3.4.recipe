SUMMARY="A llvm front end compiler for C and C++" 
DESCRIPTION="
Clang is an 'LLVM native' C/C++/Objective-C compiler, which aims to deliver \
amazingly fast compiles (e.g. about 3x faster than GCC when compiling \
Objective-C code in a debug configuration), extremely useful error and warning \
messages and to provide a platform for building great source level tools.
"

HOMEPAGE="http://www.llvm.org/"
LICENSE="UIUC"
COPYRIGHT="2003-2012 University of Illinois at Urbana-Champaign"

SRC_URI="http://llvm.org/releases/${portVersion}/llvm-${portVersion}.src.tar.gz"
CHECKSUM_MD5="46ed668a1ce38985120dbf6344cf6116"
SRC_URI_2="http://llvm.org/releases/${portVersion}/clang-${portVersion}.src.tar.gz"
CHECKSUM_MD5_2="b378f1e2c424e03289effc75268d3d2c"
REVISION="2"

ARCHITECTURES="x86 x86_64"
if [ $effectiveTargetArchitecture != x86_gcc2 ]; then
	ARCHITECTURES="$ARCHITECTURES x86_gcc2"
fi
SECONDARY_ARCHITECTURES="x86"

PROVIDES="
	clang$secondaryArchSuffix = $portVersion
	cmd:clang = $portVersion
	cmd:clang++ = $portVersion
	cmd:c_index_test = $portVersion
	lib:libLTO = $portVersion
	lib:libclang = $portVersion
	lib:libprofile_rt = $portVersion
	"

REQUIRES="
	haiku$secondaryArchSuffix >= $haikuVersion
	"

BUILD_REQUIRES="
	"

BUILD_PREREQUIRES="
	haiku${secondaryArchSuffix}_devel >= $haikuVersion
	cmd:aclocal
	cmd:autoconf
	cmd:automake
	cmd:gcc$secondaryArchSuffix
	cmd:groff
	cmd:ld$secondaryArchSuffix
	cmd:libtoolize
	cmd:make
	cmd:python
	cmd:sed
	"

SOURCE_DIR="llvm-${portVersion}"

PATCHES="llvm-${portVersion}.patchset"
PATCHES_2="clang-${portVersion}.patchset"

BUILD()
{
	mkdir -p tools/clang
	cp -rd $sourceDir2/clang-${portVersion}/* tools/clang/
	#cp -r /boot/system/data/libtool/config/. autoconf/
	#cp -r /boot/system/data/libtool/config/. projects/sample/autoconf/
	
	# Fix improper env paths
	find . -type f -exec sed -i 's/\/usr\/bin\/env/\/bin\/env/g' "{}" \;
	
	# Haiku C++ requires rtti in a lot of central system components
	# such as Mesa
	export REQUIRES_RTTI=1

	# TODO: clang's build system seems to ignore doc / man / shared dirs?
	runConfigure ./configure --enable-optimized
	make $jobArgs
}

INSTALL()
{
	mkdir -p $developDir
	mkdir -p $docDir

	make install-clang
	
	# Install static analysis tools
	mkdir -p $developDir/tools/clang$secondaryArchSuffix
	cp -Ra tools/clang/tools/scan-build $developDir/tools/clang$secondaryArchSuffix/
	cp -Ra tools/clang/tools/scan-view $developDir/tools/clang$secondaryArchSuffix/
	
	ln -s $developDir/tools/clang$secondaryArchSuffix/scan-build/scan-build $binDir/scan-build
	ln -s $developDir/tools/clang$secondaryArchSuffix/scan-view/scan-view $binDir/scan-view
	ln -s $binDir/clang $developDir/tools/clang$secondaryArchSuffix/scan-build/clang
	
	# analysis package
	packageEntries analysis \
		$binDir/scan-build \
		$binDir/scan-view \
		$developDir/tools/clang$secondaryArchSuffix
}

TEST()
{
	make check
}


# ----- analysis package -------------------------------------------------------

SUMMARY_analysis="Static analysis tools using the clang compiler"
PROVIDES_analysis="
	clang${secondaryArchSuffix}_analysis = $portVersion
	cmd:scan_build = $portVersion
	cmd:scan_view = $portVersion
	"

REQUIRES_analysis="
	clang$secondaryArchSuffix == $portVersion base
	"
