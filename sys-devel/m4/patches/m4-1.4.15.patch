diff -urN m4-1.4.15/lib/binary-io.h m4-1.4.15-haiku/lib/binary-io.h
--- m4-1.4.15/lib/binary-io.h	2010-02-06 21:15:26.051118080 +0000
+++ m4-1.4.15-haiku/lib/binary-io.h	2011-01-26 11:15:38.000000000 +0000
@@ -19,24 +19,13 @@
 #define _BINARY_H
 
 /* For systems that distinguish between text and binary I/O.
-   O_BINARY is usually declared in <fcntl.h>. */
+   O_BINARY is guaranteed by the gnulib <fcntl.h>. */
 #include <fcntl.h>
 
 /* The MSVC7 <stdio.h> doesn't like to be included after '#define fileno ...',
    so we include it here first.  */
 #include <stdio.h>
 
-#if !defined O_BINARY && defined _O_BINARY
-  /* For MSC-compatible compilers.  */
-# define O_BINARY _O_BINARY
-# define O_TEXT _O_TEXT
-#endif
-#if defined __BEOS__ || defined __HAIKU__
-  /* BeOS 5 and Haiku have O_BINARY and O_TEXT, but they have no effect.  */
-# undef O_BINARY
-# undef O_TEXT
-#endif
-
 /* SET_BINARY (fd);
    changes the file descriptor fd to perform binary I/O.  */
 #if O_BINARY
@@ -58,8 +47,6 @@
 # endif
 #else
   /* On reasonable systems, binary I/O is the default.  */
-# undef O_BINARY
-# define O_BINARY 0
 # define SET_BINARY(fd) /* do nothing */ ((void) 0)
 #endif

diff -urN m4-1.4.15/lib/pipe2.c m4-1.4.15-haiku/lib/pipe2.c
--- m4-1.4.15/lib/pipe2.c	2010-03-08 21:47:53.064225280 +0000
+++ m4-1.4.15-haiku/lib/pipe2.c	2010-09-24 04:13:33.514064384 +0000
@@ -78,8 +78,11 @@
 /* Unix API.  */
 
   /* Check the supported flags.  */
-  if ((flags & ~(O_CLOEXEC | O_NONBLOCK | O_TEXT | O_BINARY)) != 0)
-    {
+#if (defined __BEOS__ || defined __HAIKU__)
+   if ((flags & ~(O_CLOEXEC | O_NONBLOCK)) != 0)
+#else
+   if ((flags & ~(O_CLOEXEC | O_NONBLOCK | O_TEXT | O_BINARY)) != 0)
+#endif    {
       errno = EINVAL;
       return -1;
     }
diff -urN m4-1.4.15/src/m4.c m4-1.4.15-haiku/src/m4.c
--- m4-1.4.15/src/m4.c	2010-06-04 17:33:48.024379392 +0000
+++ m4-1.4.15-haiku/src/m4.c	2010-09-24 04:18:51.275513344 +0000
@@ -408,7 +408,8 @@
   sigaction (SIGABRT, &act, NULL);
   sigaction (SIGILL, &act, NULL);
   sigaction (SIGFPE, &act, NULL);
-  sigaction (SIGBUS, &act, NULL);
+  if (SIGBUS != SIGSEGV)
+    sigaction (SIGBUS, &act, NULL);
   if (c_stack_action (fault_handler) == 0)
     nesting_limit = 0;
 
