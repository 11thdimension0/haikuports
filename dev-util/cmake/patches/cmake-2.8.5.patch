diff -ur orig/cmake-2.8.5/bootstrap cmake-2.8.5/bootstrap
--- orig/cmake-2.8.5/bootstrap	2011-07-08 14:21:43.006815744 +0200
+++ cmake-2.8.5/bootstrap	2013-04-28 15:17:09.327680000 +0200
@@ -142,7 +142,9 @@
     cmake_default_prefix="c:/Program Files/CMake"
   fi
 elif ${cmake_system_haiku}; then
-  cmake_default_prefix=`/bin/finddir B_COMMON_DIRECTORY`
+  cmake_default_prefix=`finddir B_COMMON_DIRECTORY`
+  cmake_man_dir="/documentation/man"
+  cmake_doc_dir="/documentation/packages/cmake-${cmake_version}"
 else
   cmake_default_prefix="/usr/local"
 fi
diff -ur orig/cmake-2.8.5/Modules/CheckForPthreads.c cmake-2.8.5/Modules/CheckForPthreads.c
--- orig/cmake-2.8.5/Modules/CheckForPthreads.c	2011-07-08 14:21:44.015204352 +0200
+++ cmake-2.8.5/Modules/CheckForPthreads.c	2013-04-28 15:17:09.328204288 +0200
@@ -16,7 +16,7 @@
   pthread_create(&tid[0], 0, runner, (void*)1);
   pthread_create(&tid[1], 0, runner, (void*)2);
   
-#if defined(__BEOS__) && !defined(__ZETA__)  && !defined(__HAIKU__) // (no usleep on BeOS 5.)
+#if defined(__BEOS__) && !defined(__ZETA__) // (no usleep on BeOS 5.)
   usleep(1); // for strange behavior on single-processor sun
 #endif
 
diff -ur orig/cmake-2.8.5/Modules/CMakeFortranCompilerId.F.in cmake-2.8.5/Modules/CMakeFortranCompilerId.F.in
--- orig/cmake-2.8.5/Modules/CMakeFortranCompilerId.F.in	2011-07-08 14:21:44.022282240 +0200
+++ cmake-2.8.5/Modules/CMakeFortranCompilerId.F.in	2013-04-28 15:17:09.328990720 +0200
@@ -74,12 +74,8 @@
         PRINT *, 'INFO:platform[IRIX]'
 #elif defined(__hpux) || defined(__hpux__)
         PRINT *, 'INFO:platform[HP-UX]'
-#elif defined(__HAIKU) || defined(__HAIKU__) || defined(_HAIKU)
+#elif defined(__HAIKU__)
         PRINT *, 'INFO:platform[Haiku]'
-#       if 0
-!       Haiku also defines __BEOS__ so we must
-!       put it prior to the check for __BEOS__
-#       endif
 #elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
         PRINT *, 'INFO:platform[BeOS]'
 #elif defined(__QNX__) || defined(__QNXNTO__)
diff -ur orig/cmake-2.8.5/Modules/CMakePlatformId.h.in cmake-2.8.5/Modules/CMakePlatformId.h.in
--- orig/cmake-2.8.5/Modules/CMakePlatformId.h.in	2011-07-08 14:21:44.023330816 +0200
+++ cmake-2.8.5/Modules/CMakePlatformId.h.in	2013-04-28 15:17:09.329777152 +0200
@@ -35,11 +35,8 @@
 #elif defined(__hpux) || defined(__hpux__)
 # define PLATFORM_ID "HP-UX"
 
-#elif defined(__HAIKU) || defined(__HAIKU__) || defined(_HAIKU)
+#elif defined(__HAIKU__)
 # define PLATFORM_ID "Haiku"
-/* Haiku also defines __BEOS__ so we must 
-   put it prior to the check for __BEOS__
-*/
 
 #elif defined(__BeOS) || defined(__BEOS__) || defined(_BEOS)
 # define PLATFORM_ID "BeOS"
diff -ur orig/cmake-2.8.5/Modules/FindGLUT.cmake cmake-2.8.5/Modules/FindGLUT.cmake
--- orig/cmake-2.8.5/Modules/FindGLUT.cmake	2011-07-08 14:21:44.038273024 +0200
+++ cmake-2.8.5/Modules/FindGLUT.cmake	2013-04-28 15:17:09.330301440 +0200
@@ -46,20 +46,22 @@
       /usr/openwin/include
       /opt/graphics/OpenGL/include
       /opt/graphics/OpenGL/contrib/libglut
+      /boot/system/develop/headers/os/opengl
       )
   
     FIND_LIBRARY( GLUT_glut_LIBRARY glut
       /usr/openwin/lib
       )
-    
-    FIND_LIBRARY( GLUT_Xi_LIBRARY Xi
-      /usr/openwin/lib
-      )
-    
-    FIND_LIBRARY( GLUT_Xmu_LIBRARY Xmu
-      /usr/openwin/lib
-      )
-    
+
+    IF(NOT BEOS AND NOT HAIKU)
+      FIND_LIBRARY( GLUT_Xi_LIBRARY Xi
+        /usr/openwin/lib
+        )
+
+      FIND_LIBRARY( GLUT_Xmu_LIBRARY Xmu
+        /usr/openwin/lib
+        )
+    ENDIF(NOT BEOS AND NOT HAIKU)
   ENDIF (APPLE)
   
 ENDIF (WIN32)
@@ -69,12 +71,18 @@
   IF(GLUT_glut_LIBRARY)
     # Is -lXi and -lXmu required on all platforms that have it?
     # If not, we need some way to figure out what platform we are on.
-    SET( GLUT_LIBRARIES
-      ${GLUT_glut_LIBRARY}
-      ${GLUT_Xmu_LIBRARY}
-      ${GLUT_Xi_LIBRARY} 
-      ${GLUT_cocoa_LIBRARY}
-      )
+    IF(BEOS OR HAIKU)
+      SET( GLUT_LIBRARIES
+        ${GLUT_glut_LIBRARY}
+        )
+    ELSE(BEOS OR HAIKU)
+      SET( GLUT_LIBRARIES
+        ${GLUT_glut_LIBRARY}
+        ${GLUT_Xmu_LIBRARY}
+        ${GLUT_Xi_LIBRARY} 
+        ${GLUT_cocoa_LIBRARY}
+        )
+    ENDIF(BEOS OR HAIKU)
     SET( GLUT_FOUND "YES" )
     
     #The following deprecated settings are for backwards compatibility with CMake1.4
@@ -84,9 +92,16 @@
   ENDIF(GLUT_glut_LIBRARY)
 ENDIF(GLUT_INCLUDE_DIR)
 
-MARK_AS_ADVANCED(
-  GLUT_INCLUDE_DIR
-  GLUT_glut_LIBRARY
-  GLUT_Xmu_LIBRARY
-  GLUT_Xi_LIBRARY
-  )
+IF(BEOS OR HAIKU)
+  MARK_AS_ADVANCED(
+    GLUT_INCLUDE_DIR
+    GLUT_glut_LIBRARY
+    )
+ELSE(BEOS OR HAIKU)
+  MARK_AS_ADVANCED(
+    GLUT_INCLUDE_DIR
+    GLUT_glut_LIBRARY
+    GLUT_Xmu_LIBRARY
+    GLUT_Xi_LIBRARY
+    )
+ENDIF(BEOS OR HAIKU)
diff -ur orig/cmake-2.8.5/Modules/FindLua51.cmake cmake-2.8.5/Modules/FindLua51.cmake
--- orig/cmake-2.8.5/Modules/FindLua51.cmake	2011-07-08 14:21:44.040632320 +0200
+++ cmake-2.8.5/Modules/FindLua51.cmake	2013-04-28 15:17:09.330825728 +0200
@@ -57,13 +57,13 @@
 
 IF(LUA_LIBRARY)
   # include the math library for Unix
-  IF(UNIX AND NOT APPLE)
+  IF(UNIX AND NOT APPLE AND NOT BEOS AND NOT HAIKU)
     FIND_LIBRARY(LUA_MATH_LIBRARY m)
     SET( LUA_LIBRARIES "${LUA_LIBRARY};${LUA_MATH_LIBRARY}" CACHE STRING "Lua Libraries")
   # For Windows and Mac, don't need to explicitly include the math library
   ELSE(UNIX AND NOT APPLE)
     SET( LUA_LIBRARIES "${LUA_LIBRARY}" CACHE STRING "Lua Libraries")
-  ENDIF(UNIX AND NOT APPLE)
+  ENDIF(UNIX AND NOT APPLE AND NOT BEOS AND NOT HAIKU)
 ENDIF(LUA_LIBRARY)
 
 INCLUDE(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)
diff -ur orig/cmake-2.8.5/Modules/FindOpenGL.cmake cmake-2.8.5/Modules/FindOpenGL.cmake
--- orig/cmake-2.8.5/Modules/FindOpenGL.cmake	2011-07-08 14:21:44.041418752 +0200
+++ cmake-2.8.5/Modules/FindOpenGL.cmake	2013-04-28 15:17:09.331612160 +0200
@@ -80,6 +80,7 @@
       /usr/share/doc/NVIDIA_GLX-1.0/include
       /usr/openwin/share/include
       /opt/graphics/OpenGL/include /usr/X11R6/include
+      /boot/system/develop/headers/os/opengl
     )
 
     FIND_PATH(OPENGL_xmesa_INCLUDE_DIR GL/xmesa.h
diff -ur orig/cmake-2.8.5/Modules/Platform/Haiku.cmake cmake-2.8.5/Modules/Platform/Haiku.cmake
--- orig/cmake-2.8.5/Modules/Platform/Haiku.cmake	2011-07-08 14:21:44.013107200 +0200
+++ cmake-2.8.5/Modules/Platform/Haiku.cmake	2013-05-20 17:09:28.999292928 +0200
@@ -1,20 +1,88 @@
-SET(BEOS 1)
+SET(HAIKU 1)
+SET(UNIX 1)
 
-SET(CMAKE_DL_LIBS root be)
+SET(CMAKE_DL_LIBS "")
 SET(CMAKE_SHARED_LIBRARY_C_FLAGS "-fPIC")
-SET(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS "-nostart")
+SET(CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS "-shared")
 SET(CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG "-Wl,-rpath,")
 SET(CMAKE_SHARED_LIBRARY_RUNTIME_C_FLAG_SEP ":")
+SET(CMAKE_SHARED_LIBRARY_RPATH_LINK_C_FLAG "-Wl,-rpath-link,")
 SET(CMAKE_SHARED_LIBRARY_SONAME_C_FLAG "-Wl,-soname,")
+SET(CMAKE_EXE_EXPORTS_C_FLAG "-Wl,--export-dynamic")
 
-INCLUDE(Platform/UnixPaths)
-LIST(APPEND CMAKE_SYSTEM_PREFIX_PATH /boot/common)
-LIST(APPEND CMAKE_SYSTEM_INCLUDE_PATH /boot/common/include)
-LIST(APPEND CMAKE_SYSTEM_LIBRARY_PATH /boot/common/lib)
-LIST(APPEND CMAKE_SYSTEM_PROGRAM_PATH /boot/common/bin)
-LIST(APPEND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES /boot/common/lib)
-LIST(APPEND CMAKE_SYSTEM_INCLUDE_PATH /boot/develop/headers/3rdparty)
-LIST(APPEND CMAKE_SYSTEM_LIBRARY_PATH /boot/develop/lib/x86)
+LIST(APPEND CMAKE_SYSTEM_PREFIX_PATH
+  /boot/common/non-packaged
+  /boot/common
+  /boot/system
+  )
+
+LIST(APPEND CMAKE_HAIKU_COMMON_INCLUDE_DIRECTORIES
+  /boot/common/non-packaged/develop/headers
+  /boot/common/non-packaged/include
+    # TODO: To be removed
+  /boot/common/develop/headers
+  /boot/common/include
+    # TODO: To be removed
+  /boot/common/develop/headers
+  )
+
+LIST(APPEND CMAKE_HAIKU_C_INCLUDE_DIRECTORIES
+  ${CMAKE_HAIKU_COMMON_INCLUDE_DIRECTORIES}
+  /boot/system/develop/headers/3rdparty
+  /boot/system/develop/headers/bsd
+  /boot/system/develop/headers/glibc
+  /boot/system/develop/headers/gnu
+  /boot/system/develop/headers/posix
+  /boot/system/develop/headers
+  )
+
+LIST(APPEND CMAKE_HAIKU_CXX_INCLUDE_DIRECTORIES
+  ${CMAKE_HAIKU_COMMON_INCLUDE_DIRECTORIES}
+  /boot/system/develop/headers/os
+  /boot/system/develop/headers/os/app
+  /boot/system/develop/headers/os/device
+  /boot/system/develop/headers/os/drivers
+  /boot/system/develop/headers/os/game
+  /boot/system/develop/headers/os/interface
+  /boot/system/develop/headers/os/kernel
+  /boot/system/develop/headers/os/locale
+  /boot/system/develop/headers/os/mail
+  /boot/system/develop/headers/os/media
+  /boot/system/develop/headers/os/midi
+  /boot/system/develop/headers/os/midi2
+  /boot/system/develop/headers/os/net
+  /boot/system/develop/headers/os/opengl
+  /boot/system/develop/headers/os/storage
+  /boot/system/develop/headers/os/support
+  /boot/system/develop/headers/os/translation
+  /boot/system/develop/headers/os/add-ons/graphics
+  /boot/system/develop/headers/os/add-ons/input_server
+  /boot/system/develop/headers/os/add-ons/screen_saver
+  /boot/system/develop/headers/os/add-ons/tracker
+  /boot/system/develop/headers/os/be_apps/Deskbar
+  /boot/system/develop/headers/os/be_apps/NetPositive
+  /boot/system/develop/headers/os/be_apps/Tracker
+  /boot/system/develop/headers/3rdparty
+  /boot/system/develop/headers/bsd
+  /boot/system/develop/headers/glibc
+  /boot/system/develop/headers/gnu
+  /boot/system/develop/headers/posix
+  /boot/system/develop/headers
+  )
+
+LIST(APPEND CMAKE_SYSTEM_INCLUDE_PATH ${CMAKE_HAIKU_C_INCLUDE_DIRECTORIES})
+
+LIST(APPEND CMAKE_HAIKU_DEVELOP_LIB_DIRECTORIES
+  /boot/common/non-packaged/develop/lib
+  /boot/common/develop/lib
+  /boot/system/develop/lib
+  )
+
+LIST(APPEND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES
+  ${CMAKE_HAIKU_DEVELOP_LIB_DIRECTORIES}
+  )
+
+LIST(APPEND CMAKE_SYSTEM_LIBRARY_PATH ${CMAKE_HAIKU_DEVELOP_LIB_DIRECTORIES})
 
 IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
   SET(CMAKE_INSTALL_PREFIX "/boot/common" CACHE PATH
diff -ur orig/cmake-2.8.5/Source/cmCTest.cxx cmake-2.8.5/Source/cmCTest.cxx
--- orig/cmake-2.8.5/Source/cmCTest.cxx	2011-07-08 14:21:45.012320768 +0200
+++ cmake-2.8.5/Source/cmCTest.cxx	2013-04-28 15:17:09.334757888 +0200
@@ -53,14 +53,10 @@
 #include <cm_zlib.h>
 #include <cmsys/Base64.h>
 
-#if defined(__BEOS__) && !defined(__HAIKU__)
+#if defined(__BEOS__) || defined(__HAIKU__)
 #include <be/kernel/OS.h>   /* disable_debugger() API. */
 #endif
 
-#if defined(__HAIKU__)
-#include <os/kernel/OS.h>   /* disable_debugger() API. */
-#endif
-
 
 #define DEBUGOUT std::cout << __LINE__ << " "; std::cout
 #define DEBUGERR std::cerr << __LINE__ << " "; std::cerr
diff -ur orig/cmake-2.8.5/Source/cmExportCommand.cxx cmake-2.8.5/Source/cmExportCommand.cxx
--- orig/cmake-2.8.5/Source/cmExportCommand.cxx	2011-07-08 14:21:45.021757952 +0200
+++ cmake-2.8.5/Source/cmExportCommand.cxx	2013-04-28 15:17:09.335544320 +0200
@@ -20,7 +20,8 @@
 #include "cmExportBuildFileGenerator.h"
 
 #if defined(__HAIKU__)
-#include <StorageKit.h>
+#include <FindDirectory.h>
+#include <StorageDefs.h>
 #endif
 
 cmExportCommand::cmExportCommand()
@@ -297,14 +298,15 @@
                                               const char* hash)
 {
 #if defined(__HAIKU__)
-  BPath dir;
-  if (find_directory(B_USER_SETTINGS_DIRECTORY, &dir) != B_OK)
+  char dir[B_PATH_NAME_LENGTH];
+  if (find_directory(B_USER_SETTINGS_DIRECTORY, -1, false, dir, sizeof(dir)) !=
+      B_OK)
     {
     return;
     }
-  dir.Append("cmake/packages");
-  dir.Append(package.c_str());
-  std::string fname = dir.Path();
+  std::string fname = dir;
+  fname += "/cmake/packages/";
+  fname += package;
 #else
   const char* home = cmSystemTools::GetEnv("HOME");
   if(!home)
diff -ur orig/cmake-2.8.5/Source/cmFindPackageCommand.cxx cmake-2.8.5/Source/cmFindPackageCommand.cxx
--- orig/cmake-2.8.5/Source/cmFindPackageCommand.cxx	2011-07-08 14:21:46.025690112 +0200
+++ cmake-2.8.5/Source/cmFindPackageCommand.cxx	2013-04-28 15:17:09.336855040 +0200
@@ -19,7 +19,9 @@
 #endif
 
 #if defined(__HAIKU__)
-#include <StorageKit.h>
+#include <string.h>
+#include <FindDirectory.h>
+#include <StorageDefs.h>
 #endif
 
 void cmFindPackageNeedBackwardsCompatibility(const std::string& variable,
@@ -1292,12 +1294,13 @@
 #if defined(_WIN32) && !defined(__CYGWIN__)
   this->LoadPackageRegistryWinUser();
 #elif defined(__HAIKU__)
-  BPath dir;
-  if (find_directory(B_USER_SETTINGS_DIRECTORY, &dir) == B_OK)
+  char dir[B_PATH_NAME_LENGTH];
+  if (find_directory(B_USER_SETTINGS_DIRECTORY, -1, false, dir, sizeof(dir)) ==
+      B_OK)
     {
-    dir.Append("cmake/packages");
-    dir.Append(this->Name.c_str());
-    this->LoadPackageRegistryDir(dir.Path());
+    strlcat(dir, "/cmake/packages/", sizeof(dir));
+    strlcat(dir, this->Name.c_str(), sizeof(dir));
+    this->LoadPackageRegistryDir(dir);
     }
 #else
   if(const char* home = cmSystemTools::GetEnv("HOME"))
diff -ur orig/cmake-2.8.5/Source/cmLocalGenerator.cxx cmake-2.8.5/Source/cmLocalGenerator.cxx
--- orig/cmake-2.8.5/Source/cmLocalGenerator.cxx	2011-07-08 14:21:46.039845888 +0200
+++ cmake-2.8.5/Source/cmLocalGenerator.cxx	2013-04-28 15:17:09.338427904 +0200
@@ -37,7 +37,8 @@
 #include <assert.h>
 
 #if defined(__HAIKU__)
-#include <StorageKit.h>
+#include <FindDirectory.h>
+#include <StorageDefs.h>
 #endif
 
 cmLocalGenerator::cmLocalGenerator()
@@ -354,12 +355,12 @@
     prefix = prefix_win32.c_str();
     }
 #elif defined(__HAIKU__)
+  char dir[B_PATH_NAME_LENGTH];
   if (!prefix)
     {
-    BPath dir;
-    if (find_directory(B_COMMON_DIRECTORY, &dir) == B_OK)
+    if (find_directory(B_COMMON_DIRECTORY, -1, false, dir, sizeof(dir)) == B_OK)
       {
-      prefix = dir.Path();
+      prefix = dir;
       }
     else
       {
diff -ur orig/cmake-2.8.5/Source/CPack/cmCPackGenerator.cxx cmake-2.8.5/Source/CPack/cmCPackGenerator.cxx
--- orig/cmake-2.8.5/Source/CPack/cmCPackGenerator.cxx	2011-07-08 14:21:47.059244544 +0200
+++ cmake-2.8.5/Source/CPack/cmCPackGenerator.cxx	2013-04-28 15:17:09.339476480 +0200
@@ -27,7 +27,8 @@
 #include <algorithm>
 
 #if defined(__HAIKU__)
-#include <StorageKit.h>
+#include <FindDirectory.h>
+#include <StorageDefs.h>
 #endif
 
 //----------------------------------------------------------------------
@@ -1206,10 +1207,10 @@
   this->InstallPath += "-";
   this->InstallPath += this->GetOption("CPACK_PACKAGE_VERSION");
 #elif defined(__HAIKU__)
-  BPath dir;
-  if (find_directory(B_COMMON_DIRECTORY, &dir) == B_OK)
+  char dir[B_PATH_NAME_LENGTH];
+  if (find_directory(B_COMMON_DIRECTORY, -1, false, dir, sizeof(dir)) == B_OK)
     {
-    this->InstallPath = dir.Path();
+    this->InstallPath = dir;
     }
   else
     {
diff -ur orig/cmake-2.8.5/Source/CPack/cmCPackGeneratorFactory.cxx cmake-2.8.5/Source/CPack/cmCPackGeneratorFactory.cxx
--- orig/cmake-2.8.5/Source/CPack/cmCPackGeneratorFactory.cxx	2011-07-08 14:21:47.059506688 +0200
+++ cmake-2.8.5/Source/CPack/cmCPackGeneratorFactory.cxx	2013-04-28 15:17:09.340262912 +0200
@@ -32,7 +32,7 @@
 #endif
 
 #if !defined(_WIN32) && !defined(__APPLE__) \
- && !defined(__QNXNTO__) && !defined(__BEOS__)
+ && !defined(__QNXNTO__) && !defined(__BEOS__) && !defined(__HAIKU__)
 #  include "cmCPackDebGenerator.h"
 #  include "cmCPackRPMGenerator.h"
 #endif
@@ -73,7 +73,7 @@
     cmCPackOSXX11Generator::CreateGenerator);
 #endif
 #if !defined(_WIN32) && !defined(__APPLE__) \
-  && !defined(__QNXNTO__) && !defined(__BEOS__)
+  && !defined(__QNXNTO__) && !defined(__BEOS__) && !defined(__HAIKU__)
   this->RegisterGenerator("DEB", "Debian packages",
     cmCPackDebGenerator::CreateGenerator);
   this->RegisterGenerator("RPM", "RPM packages",
diff -ur orig/cmake-2.8.5/Source/kwsys/ProcessUNIX.c cmake-2.8.5/Source/kwsys/ProcessUNIX.c
--- orig/cmake-2.8.5/Source/kwsys/ProcessUNIX.c	2011-07-08 14:21:48.017301504 +0200
+++ cmake-2.8.5/Source/kwsys/ProcessUNIX.c	2013-04-28 15:17:09.341835776 +0200
@@ -63,10 +63,6 @@
 #include <dirent.h>    /* DIR, dirent */
 #include <ctype.h>     /* isspace */
 
-#ifdef __HAIKU__
-#undef __BEOS__
-#endif
-
 #if defined(__VMS)
 # define KWSYSPE_VMS_NONBLOCK , O_NONBLOCK
 #else
diff -ur orig/cmake-2.8.5/Source/kwsys/SystemTools.cxx cmake-2.8.5/Source/kwsys/SystemTools.cxx
--- orig/cmake-2.8.5/Source/kwsys/SystemTools.cxx	2011-07-08 14:21:48.019398656 +0200
+++ cmake-2.8.5/Source/kwsys/SystemTools.cxx	2013-04-28 15:17:09.343670784 +0200
@@ -145,12 +145,7 @@
 #define _chdir chdir
 #endif
 
-#if defined(__HAIKU__)
-#include <os/kernel/OS.h>
-#include <os/storage/Path.h>
-#endif
-
-#if defined(__BEOS__) && !defined(__ZETA__) && !defined(__HAIKU__)
+#if defined(__BEOS__) && !defined(__ZETA__)
 #include <be/kernel/OS.h>
 #include <be/storage/Path.h>
 
diff -ur orig/cmake-2.8.5/Source/kwsys/testDynamicLoader.cxx cmake-2.8.5/Source/kwsys/testDynamicLoader.cxx
--- orig/cmake-2.8.5/Source/kwsys/testDynamicLoader.cxx	2011-07-08 14:21:49.020447232 +0200
+++ cmake-2.8.5/Source/kwsys/testDynamicLoader.cxx	2013-04-28 15:17:09.344719360 +0200
@@ -15,14 +15,10 @@
 #include KWSYS_HEADER(ios/iostream)
 #include KWSYS_HEADER(stl/string)
 
-#if defined(__BEOS__) && !defined(__HAIKU__)
+#if defined(__BEOS__) || defined(__HAIKU__)
 #include <be/kernel/OS.h>  /* disable_debugger() API. */
 #endif
 
-#if defined(__HAIKU__)
-#include <os/kernel/OS.h>  /* disable_debugger() API. */
-#endif
-
 // Work-around CMake dependency scanning limitation.  This must
 // duplicate the above list of headers.
 #if 0
diff -ur orig/cmake-2.8.5/Source/kwsys/testProcess.c cmake-2.8.5/Source/kwsys/testProcess.c
--- orig/cmake-2.8.5/Source/kwsys/testProcess.c	2011-07-08 14:21:49.020971520 +0200
+++ cmake-2.8.5/Source/kwsys/testProcess.c	2013-04-28 15:17:09.345767936 +0200
@@ -32,7 +32,7 @@
 # pragma warn -8060 /* possibly incorrect assignment */
 #endif
 
-#if defined(__BEOS__) && !defined(__ZETA__) && !defined(__HAIKU__)
+#if defined(__BEOS__) && !defined(__ZETA__)
 /* BeOS 5 doesn't have usleep(), but it has snooze(), which is identical. */
 # include <be/kernel/OS.h>
 static inline void testProcess_usleep(unsigned int msec)
diff -ur orig/cmake-2.8.5/Tests/Complex/Library/CMakeLists.txt cmake-2.8.5/Tests/Complex/Library/CMakeLists.txt
--- orig/cmake-2.8.5/Tests/Complex/Library/CMakeLists.txt	2011-07-08 14:21:50.045350912 +0200
+++ cmake-2.8.5/Tests/Complex/Library/CMakeLists.txt	2013-04-28 15:17:09.346292224 +0200
@@ -52,9 +52,9 @@
   FULL_DOCS "A simple etst proerty that means nothign and is used for nothing"
   )
 SET_TARGET_PROPERTIES(CMakeTestCLibraryShared PROPERTIES FOO BAR)
-IF(NOT BEOS AND NOT WIN32)  # No libm on BeOS.
+IF(NOT BEOS AND NOT WIN32 AND NOT HAIKU)  # No libm on BeOS.
   SET_TARGET_PROPERTIES(CMakeTestCLibraryShared PROPERTIES LINK_FLAGS "-lm")
-ENDIF(NOT BEOS AND NOT WIN32)
+ENDIF(NOT BEOS AND NOT WIN32 AND NOT HAIKU)
 GET_TARGET_PROPERTY(FOO_BAR_VAR CMakeTestCLibraryShared FOO)
 IF(${FOO_BAR_VAR} MATCHES "BAR")
 ELSE(${FOO_BAR_VAR} MATCHES "BAR")
diff -ur orig/cmake-2.8.5/Tests/ComplexOneConfig/Library/CMakeLists.txt cmake-2.8.5/Tests/ComplexOneConfig/Library/CMakeLists.txt
--- orig/cmake-2.8.5/Tests/ComplexOneConfig/Library/CMakeLists.txt	2011-07-08 14:21:50.049807360 +0200
+++ cmake-2.8.5/Tests/ComplexOneConfig/Library/CMakeLists.txt	2013-04-28 15:17:09.347078656 +0200
@@ -52,9 +52,9 @@
   FULL_DOCS "A simple etst proerty that means nothign and is used for nothing"
   )
 SET_TARGET_PROPERTIES(CMakeTestCLibraryShared PROPERTIES FOO BAR)
-IF(NOT BEOS AND NOT WIN32)  # No libm on BeOS.
+IF(NOT BEOS AND NOT WIN32 AND NOT HAIKU)  # No libm on BeOS.
   SET_TARGET_PROPERTIES(CMakeTestCLibraryShared PROPERTIES LINK_FLAGS "-lm")
-ENDIF(NOT BEOS AND NOT WIN32)
+ENDIF(NOT BEOS AND NOT WIN32 AND NOT HAIKU)
 GET_TARGET_PROPERTY(FOO_BAR_VAR CMakeTestCLibraryShared FOO)
 IF(${FOO_BAR_VAR} MATCHES "BAR")
 ELSE(${FOO_BAR_VAR} MATCHES "BAR")
diff -ur orig/cmake-2.8.5/Tests/ComplexRelativePaths/Library/CMakeLists.txt cmake-2.8.5/Tests/ComplexRelativePaths/Library/CMakeLists.txt
--- orig/cmake-2.8.5/Tests/ComplexRelativePaths/Library/CMakeLists.txt	2011-07-08 14:21:50.054001664 +0200
+++ cmake-2.8.5/Tests/ComplexRelativePaths/Library/CMakeLists.txt	2013-04-28 15:17:09.347865088 +0200
@@ -52,9 +52,9 @@
   FULL_DOCS "A simple etst proerty that means nothign and is used for nothing"
   )
 SET_TARGET_PROPERTIES(CMakeTestCLibraryShared PROPERTIES FOO BAR)
-IF(NOT BEOS AND NOT WIN32)  # No libm on BeOS.
+IF(NOT BEOS AND NOT WIN32 AND NOT HAIKU)  # No libm on BeOS.
   SET_TARGET_PROPERTIES(CMakeTestCLibraryShared PROPERTIES LINK_FLAGS "-lm")
-ENDIF(NOT BEOS AND NOT WIN32)
+ENDIF(NOT BEOS AND NOT WIN32 AND NOT HAIKU)
 GET_TARGET_PROPERTY(FOO_BAR_VAR CMakeTestCLibraryShared FOO)
 IF(${FOO_BAR_VAR} MATCHES "BAR")
 ELSE(${FOO_BAR_VAR} MATCHES "BAR")
diff -ur orig/cmake-2.8.5/Utilities/cmcurl/CMake/CurlTests.c cmake-2.8.5/Utilities/cmcurl/CMake/CurlTests.c
--- orig/cmake-2.8.5/Utilities/cmcurl/CMake/CurlTests.c	2011-07-08 14:21:54.027262976 +0200
+++ cmake-2.8.5/Utilities/cmcurl/CMake/CurlTests.c	2013-04-28 15:17:09.348913664 +0200
@@ -38,7 +38,7 @@
 # define PLATFORM_AIX_V3
 #endif
 
-#if defined(PLATFORM_SUNOS4) || defined(PLATFORM_AIX_V3) || (defined(__BEOS__) && !defined(__HAIKU__))
+#if defined(PLATFORM_SUNOS4) || defined(PLATFORM_AIX_V3) || defined(__BEOS__)
 #error "O_NONBLOCK does not work on this platform"
 #endif
   int socket;
diff -ur orig/cmake-2.8.5/Utilities/cmcurl/select.c cmake-2.8.5/Utilities/cmcurl/select.c
--- orig/cmake-2.8.5/Utilities/cmcurl/select.c	2011-07-08 14:21:55.037486592 +0200
+++ cmake-2.8.5/Utilities/cmcurl/select.c	2013-04-28 15:17:09.349437952 +0200
@@ -39,7 +39,7 @@
 #error "We can't compile without select() support!"
 #endif
 
-#if defined(__BEOS__) && !defined(__HAIKU__)
+#if defined(__BEOS__)
 /* BeOS has FD_SET defined in socket.h */
 #include <socket.h>
 #endif
diff -ur orig/cmake-2.8.5/Utilities/cmzlib/zconf.h cmake-2.8.5/Utilities/cmzlib/zconf.h
--- orig/cmake-2.8.5/Utilities/cmzlib/zconf.h	2011-07-08 14:21:58.028311552 +0200
+++ cmake-2.8.5/Utilities/cmzlib/zconf.h	2013-04-28 15:17:09.350224384 +0200
@@ -237,7 +237,7 @@
 #  endif
 #endif
 
-#if defined (__BEOS__) && !defined (__HAIKU__)
+#if defined (__BEOS__)
 #  ifdef ZLIB_DLL
 #    ifdef ZLIB_INTERNAL
 #      define ZEXPORT   __declspec(dllexport)
diff -ur orig/cmake-2.8.5/Utilities/cmzlib/zutil.h cmake-2.8.5/Utilities/cmzlib/zutil.h
--- orig/cmake-2.8.5/Utilities/cmzlib/zutil.h	2011-07-08 14:21:58.029097984 +0200
+++ cmake-2.8.5/Utilities/cmzlib/zutil.h	2013-04-28 15:17:09.350748672 +0200
@@ -147,12 +147,6 @@
 #  define OS_CODE  0x0f
 #endif
 
-/* Haiku defines both __HAIKU__ and __BEOS__ (for now) */
-/* many BeOS workarounds are no longer needed in Haiku */
-#if defined(__HAIKU__) && defined(__BEOS__)
-#undef __BEOS__
-#endif
-
 #if defined(_BEOS_) || defined(RISCOS) 
 #  define fdopen(fd,mode) NULL /* No fdopen() */
 #endif
