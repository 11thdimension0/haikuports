SUMMARY="Multi-platform GL implementation"
DESCRIPTION="Mesa is an open-source implementation of the OpenGL specification - a system for rendering interactive 3D graphics.

Mesa fills the role of the Haiku OpenGL kit.
"

HOMEPAGE="http://www.mesa3d.org/"
COPYRIGHT="1999-2013 Brian Paul All Rights Reserved."
LICENSE="MIT"
SRC_URI="git://anongit.freedesktop.org/mesa/mesa"
REVISION="1"
ARCHITECTURES="x86 x86_64"
if [ $effectiveTargetArchitecture != x86_gcc2 ]; then
	# x86_gcc2 is fine as primary target architecture as long as we're building
	# for a different secondary architecture.
	ARCHITECTURES="$ARCHITECTURES x86_gcc2"
fi
SECONDARY_ARCHITECTURES="x86"

PROVIDES="
	mesa$secondaryArchSuffix = $portVersion compat >= 9.3
	lib:libGL$secondaryArchSuffix = $portVersion compat >= 9.3
	"
REQUIRES="
	haiku$secondaryArchSuffix >= $haikuVersion
	"
BUILD_REQUIRES="
	"
BUILD_PREREQUIRES="
	haiku${secondaryArchSuffix}_devel >= $haikuVersion
	libxml2_python
	llvm >= 3.2
	cmd:bison
	cmd:find
	cmd:flex
	cmd:gcc$secondaryArchSuffix
	cmd:ld$secondaryArchSuffix
	cmd:scons
	cmd:sed
	"

SOURCE_DIR="Mesa-$portVersion"

BUILD()
{
	if [ -n "$secondaryArchSuffix" ]; then
		export HAIKU_SECONDARY_ARCH="$effectiveTargetArchitecture"
	fi
	scons $jobArgs build=release
	#scons $jobArgs build=debug
}

INSTALL()
{
	mesaBuildDir=build/haiku-$effectiveTargetArchitecture

	mkdir -p $includeDir/GL
	cp include/GL/gl.h $includeDir/GL/
	cp include/GL/gl_mangle.h $includeDir/GL/
	cp include/GL/glext.h $includeDir/GL/

	# libGL.so makes up the core of our OpenGL kit
	mkdir -p $libDir
	cp $(find $mesaBuildDir -name 'libGL.so') $libDir

	# Our rendering add-ons
	mkdir -p $addOnsDir/opengl
	cp $(find $mesaBuildDir -name 'libswpipe.so') $addOnsDir/opengl/Softpipe

	# devel package
	packageEntries devel \
		$developDir
	# swpipe renderer package
	packageEntries swpipe \
		$addOnsDir
}

# ----- devel package -------------------------------------------------------

PROVIDES_devel="
	mesa${secondaryArchSuffix}_devel = $portVersion
	"

REQUIRES_devel="
	mesa$secondaryArchSuffix == $portVersion base
	"

# ----- swpipe package -------------------------------------------------------

PROVIDES_swpipe="
	mesa${secondaryArchSuffix}_swpipe = $portVersion
	"

REQUIRED_swpipe="
	mesa$secondaryArchSuffix == $portVersion base
	"
