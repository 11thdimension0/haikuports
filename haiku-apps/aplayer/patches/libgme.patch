Index: gme.cpp
===================================================================
--- gme.cpp	(revision 34)
+++ gme.cpp	(working copy)
@@ -357,9 +357,7 @@
 
 BLARGG_EXPORT void gme_equalizer( Music_Emu const* me, gme_equalizer_t* out )
 {
-	gme_equalizer_t e = { };
-	e.treble = me->equalizer().treble;
-	e.bass   = me->equalizer().bass;
+	gme_equalizer_t e(me->equalizer().treble, me->equalizer().bass);
 	*out = e;
 }
 
Index: Gbs_Emu.cpp
===================================================================
--- Gbs_Emu.cpp	(revision 34)
+++ Gbs_Emu.cpp	(working copy)
@@ -18,8 +18,8 @@
 
 #include "blargg_source.h"
 
-Gbs_Emu::equalizer_t const Gbs_Emu::handheld_eq   = { -47.0, 2000 };
-Gbs_Emu::equalizer_t const Gbs_Emu::headphones_eq = {   0.0,  300 };
+Gbs_Emu::equalizer_t const Gbs_Emu::handheld_eq   ( -47.0, 2000 );
+Gbs_Emu::equalizer_t const Gbs_Emu::headphones_eq (   0.0,  300 );
 
 Gbs_Emu::Gbs_Emu()
 {
@@ -39,7 +39,7 @@
 	set_max_initial_silence( 21 );
 	set_gain( 1.2 );
 	
-	static equalizer_t const eq = { -1.0, 120 };
+	static equalizer_t const eq ( -1.0, 120 );
 	set_equalizer( eq );
 }
 
Index: Nsf_Emu.h
===================================================================
--- Nsf_Emu.h	(revision 34)
+++ Nsf_Emu.h	(working copy)
@@ -44,7 +44,11 @@
 	
 public:
 	// deprecated
+#if (!defined(__GNUC__) || (__GNUC__ > 2))
 	Music_Emu::load;
+#else
+	blargg_err_t load( Data_Reader& r) {return Music_Emu::load(r);}
+#endif
 	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader
 			{ return load_remaining_( &h, sizeof h, in ); }
 
Index: Nsfe_Emu.h
===================================================================
--- Nsfe_Emu.h	(revision 34)
+++ Nsfe_Emu.h	(working copy)
@@ -46,7 +46,9 @@
 public:
 	// deprecated
 	struct header_t { char tag [4]; };
+#if (!defined(__GNUC__) || (__GNUC__ > 2))
 	Music_Emu::load;
+#endif
 	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader
 			{ return load_remaining_( &h, sizeof h, in ); }
 	void disable_playlist( bool = true ); // use clear_playlist()
Index: Gym_Emu.h
===================================================================
--- Gym_Emu.h	(revision 34)
+++ Gym_Emu.h	(working copy)
@@ -34,7 +34,9 @@
 	
 public:
 	// deprecated
+#if !defined(__GNUC__) || __GNUC__ > 2
 	Music_Emu::load;
+#endif
 	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader
 			{ return load_remaining_( &h, sizeof h, in ); }
 	enum { gym_rate = 60 }; 
Index: gme.h
===================================================================
--- gme.h	(revision 34)
+++ gme.h	(working copy)
@@ -134,6 +134,8 @@
 	double bass;   /* 1 = full bass, 90 = average, 16000 = almost no bass */
 	
 	double d2,d3,d4,d5,d6,d7,d8,d9; /* reserved */
+
+	gme_equalizer_t(double t, double b) {treble = t; bass = b;};
 } gme_equalizer_t;
 
 /* Get current frequency equalizater parameters */
Index: Music_Emu.cpp
===================================================================
--- Music_Emu.cpp	(revision 34)
+++ Music_Emu.cpp	(working copy)
@@ -24,7 +24,7 @@
 long const fade_block_size = 512;
 int const fade_shift = 8; // fade ends with gain at 1.0 / (1 << fade_shift)
 
-Music_Emu::equalizer_t const Music_Emu::tv_eq = { -8.0, 180 };
+Music_Emu::equalizer_t const Music_Emu::tv_eq ( -8.0, 180 );
 
 void Music_Emu::clear_track_vars()
 {
@@ -49,6 +49,7 @@
 }
 
 Music_Emu::Music_Emu()
+	: equalizer_(-1.0, 60)
 {
 	effects_buffer = 0;
 	
@@ -61,8 +62,6 @@
 	max_initial_silence = 2;
 	silence_lookahead   = 3;
 	ignore_silence_     = false;
-	equalizer_.treble   = -1.0;
-	equalizer_.bass     = 60;
 	
 	static const char* const names [] = {
 		"Voice 1", "Voice 2", "Voice 3", "Voice 4",
Index: Spc_Emu.h
===================================================================
--- Spc_Emu.h	(revision 34)
+++ Spc_Emu.h	(working copy)
@@ -48,7 +48,9 @@
 	
 public:
 	// deprecated
+#if !defined(__GNUC__) || __GNUC__ > 2
 	Music_Emu::load;
+#endif
 	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader
 			{ return load_remaining_( &h, sizeof h, in ); }
 	byte const* trailer() const; // use track_info()
Index: Music_Emu.h
===================================================================
--- Music_Emu.h	(revision 34)
+++ Music_Emu.h	(working copy)
@@ -58,7 +58,11 @@
 	void ignore_silence( bool disable = true );
 	
 	// Info for current track
+#if (!defined(__GNUC__) || (__GNUC__ > 2))
 	Gme_File::track_info;
+#else
+	blargg_err_t track_info( track_info_t* out, int k ) const {return Gme_File::track_info(out,k); }
+#endif
 	blargg_err_t track_info( track_info_t* out ) const;
 	
 // Sound customization
@@ -116,7 +120,7 @@
 	
 	virtual blargg_err_t set_sample_rate_( long sample_rate ) = 0;
 	virtual void set_equalizer_( equalizer_t const& ) { }
-	virtual void enable_accuracy_( bool enable ) { }
+	virtual void enable_accuracy_( bool /*enable*/ ) { }
 	virtual void mute_voices_( int mask ) = 0;
 	virtual void set_tempo_( double ) = 0;
 	virtual blargg_err_t start_track_( int ) = 0; // tempo is set before this
@@ -185,7 +189,7 @@
 
 inline blargg_err_t Music_Emu::track_info( track_info_t* out ) const
 {
-	return track_info( out, current_track_ );
+	return Gme_File::track_info( out, current_track_ );
 }
 
 inline long Music_Emu::sample_rate() const          { return sample_rate_; }
Index: Vgm_Emu.h
===================================================================
--- Vgm_Emu.h	(revision 34)
+++ Vgm_Emu.h	(working copy)
@@ -51,7 +51,9 @@
 	
 public:
 	// deprecated
+#if (!defined(__GNUC__) || (__GNUC__ > 2))
 	Music_Emu::load;
+#endif
 	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader
 			{ return load_remaining_( &h, sizeof h, in ); }
 	byte const* gd3_data( int* size_out = 0 ) const; // use track_info()
Index: Gbs_Emu.h
===================================================================
--- Gbs_Emu.h	(revision 34)
+++ Gbs_Emu.h	(working copy)
@@ -41,7 +41,9 @@
 	
 public:
 	// deprecated
+#if !defined(__GNUC__) || __GNUC__ > 2
 	Music_Emu::load;
+#endif
 	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader
 			{ return load_remaining_( &h, sizeof h, in ); }
 
Index: Nsf_Emu.cpp
===================================================================
--- Nsf_Emu.cpp	(revision 34)
+++ Nsf_Emu.cpp	(working copy)
@@ -31,8 +31,8 @@
 
 long const clock_divisor = 12;
 
-Nsf_Emu::equalizer_t const Nsf_Emu::nes_eq     = {  -1.0, 80 };
-Nsf_Emu::equalizer_t const Nsf_Emu::famicom_eq = { -15.0, 80 };
+Nsf_Emu::equalizer_t const Nsf_Emu::nes_eq     (  -1.0, 80 );
+Nsf_Emu::equalizer_t const Nsf_Emu::famicom_eq ( -15.0, 80 );
 
 int Nsf_Emu::pcm_read( void* emu, nes_addr_t addr )
 {
Index: Vgm_Emu.cpp
===================================================================
--- Vgm_Emu.cpp	(revision 34)
+++ Vgm_Emu.cpp	(working copy)
@@ -36,7 +36,7 @@
 	
 	set_silence_lookahead( 1 ); // tracks should already be trimmed
 	
-	static equalizer_t const eq = { -14.0, 80 };
+	static equalizer_t const eq( -14.0, 80 );
 	set_equalizer( eq );
 }
 
