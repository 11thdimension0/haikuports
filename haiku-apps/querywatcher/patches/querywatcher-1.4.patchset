From 88d1ebaf009131526657d0e848495b46bc001aee Mon Sep 17 00:00:00 2001
From: Chris Roberts <cpr420@gmail.com>
Date: Mon, 2 Dec 2013 19:32:02 -0700
Subject: Misc gcc4 fixes


diff --git a/src/App.cpp b/src/App.cpp
index 6dd6ad8..25a4bac 100644
--- a/src/App.cpp
+++ b/src/App.cpp
@@ -41,7 +41,7 @@ const char *kTrackerQueryVolume = "_trk/qryvol1";
 #include <be/kernel/fs_info.h>
 
 // Yes, globals are bad. But, sssh!
-typedef list<entry_ref> reflist;
+typedef std::list<entry_ref> reflist;
 reflist gIgnoreList;
 BPath gSettingsPath;
 
@@ -57,7 +57,7 @@ struct query_load_info
 	BRect 			rect;	
 };
 
-typedef list<BVolume> vollist;
+typedef std::list<BVolume> vollist;
 
 char *ReadAttribute(BNode node, const char *attribute, int32 *length = NULL) {
 	attr_info info;
@@ -583,7 +583,7 @@ QueryView::ShouldIgnore( BMessage * msg )
 				ref.node = node;
 				ref.device = device;
 				
-				list<node_ref>::iterator iter;
+				std::list<node_ref>::iterator iter;
 				iter = find(fIgnoredMatches.begin(), fIgnoredMatches.end(), ref);
 				
 				if ( iter == fIgnoredMatches.end() )
@@ -601,7 +601,7 @@ QueryView::ShouldIgnore( BMessage * msg )
 		if ( !result )
 		{
 			// remove node from ignore list if present
-			list<node_ref>::iterator iter;
+			std::list<node_ref>::iterator iter;
 			
 			node_ref ref;
 			ref.node = node;
@@ -619,7 +619,7 @@ QueryView::ShouldIgnore( BMessage * msg )
 	if ( opcode == B_ENTRY_REMOVED )
 	{
 		// remove from fIgnoredMatches if there
-		list<node_ref>::iterator iter;
+		std::list<node_ref>::iterator iter;
 		
 		node_ref ref;
 		ref.node = node;
@@ -653,7 +653,7 @@ QueryView::MessageReceived(BMessage* msg)
 				msg->FindInt32("device",&node.device);
 				msg->FindInt64("node",&node.node);
 				
-				list<node_ref>::iterator iter;
+				std::list<node_ref>::iterator iter;
 				
 				iter = find(fIgnoredMatches.begin(),fIgnoredMatches.end(),node);
 				
diff --git a/src/App.h b/src/App.h
index fe5e49c..765eabe 100644
--- a/src/App.h
+++ b/src/App.h
@@ -28,7 +28,7 @@ class LabelView;
 class ColorView;
 
 // slaad
-typedef list<BQuery *> querylist;
+typedef std::list<BQuery *> querylist;
 
 class App : public BApplication
 {
@@ -104,7 +104,7 @@ private:
 	BString			fPredicate;
 	
 	// eiman
-	list<node_ref>	fIgnoredMatches;
+	std::list<node_ref>	fIgnoredMatches;
 };
 
 IMPEXP class LabelView : public BStringView
diff --git a/src/makefile b/src/makefile
index 07ea621..ac5d9b2 100644
--- a/src/makefile
+++ b/src/makefile
@@ -47,7 +47,7 @@ SRCS := \
 #		naming scheme you need to specify the path to the library
 #		and it's name
 #		library: my_lib.a entry: my_lib.a or path/my_lib.a
-LIBS= be
+LIBS= be $(STDCPPLIBS)
 
 #	specify additional paths to directories following the standard
 #	libXXX.so or libXXX.a naming scheme.  You can specify full paths
@@ -149,4 +149,4 @@ else
   LIBS += zeta tracker
 endif
 
-include $(BUILDHOME)/etc/makefile-engine
\ No newline at end of file
+include $(BUILDHOME)/etc/makefile-engine
-- 
1.8.3.4

