Index: src/i18n.c
===================================================================
RCS file: /cvsroot/tuxpaint/tuxpaint/src/i18n.c,v
retrieving revision 1.76
diff -u -r1.76 i18n.c
--- src/i18n.c	3 Apr 2010 18:33:19 -0000	1.76
+++ src/i18n.c	29 Apr 2010 04:17:54 -0000
@@ -597,21 +597,24 @@
 
 static void set_langint_from_locale_string(const char *restrict loc)
 {
+  char *baseloc, *dot;
+  size_t len_baseloc;
+  int i, found;
+
   if (!loc)
     return;
 
-  char *baseloc = strdup(loc);
-  
-  char *dot = strchr(baseloc, '.');
+  baseloc = strdup(loc);
+  dot = strchr(baseloc, '.');
+
   if(dot)
     *dot = '\0';
 
-  size_t len_baseloc = strlen(baseloc);
+  len_baseloc = strlen(baseloc);
 
   /* Which, if any, of the locales is it? */
 
-  int found = 0;
-  int i;
+  found = 0;
 
   for (i = 0; i < NUM_LANGS && found == 0; i++)
   {
Index: src/tuxpaint.c
===================================================================
RCS file: /cvsroot/tuxpaint/tuxpaint/src/tuxpaint.c,v
retrieving revision 1.761
diff -u -r1.761 tuxpaint.c
--- src/tuxpaint.c	27 Apr 2010 22:04:44 -0000	1.761
+++ src/tuxpaint.c	29 Apr 2010 04:18:00 -0000
@@ -1945,7 +1945,7 @@
   int cur_thing, do_draw, max;
   int ignoring_motion;
   int j;
-  unsigned int i;
+  unsigned int i = 0;
   SDL_TimerID scrolltimer = NULL;
   SDL_Event event;
   SDLKey key;
@@ -2388,7 +2389,7 @@
 			      cur_label = LABEL_LABEL;
                                 cur_thing=label_node_to_edit->save_cur_font;
                                 do_setcursor(cursor_insertion);
-                                unsigned int i = 0;
+                                i = 0;
                                 label_node_to_edit->is_enabled = FALSE;
                                 derender_node(&label_node_to_edit);
 
@@ -3855,7 +3856,7 @@
 		    cur_label = LABEL_LABEL;
                       cur_thing=label_node_to_edit->save_cur_font;
 		  do_setcursor(cursor_insertion);
-                  unsigned int i = 0;
+                  i = 0;
                   label_node_to_edit->is_enabled = FALSE;
                   derender_node(&label_node_to_edit);
 
@@ -9175,7 +9176,7 @@
     disallow_print = 1;
 #endif
 
-#if defined __BEOS__ || __HAIKU__
+#if defined __BEOS__ || defined __HAIKU__
   if (!IsPrinterAvailable())
     disallow_print = disable_print = 1;
 #endif
@@ -12131,8 +12132,6 @@
   Bytef *compressed_data;
 
   char *ldata;
-  FILE *lfi;
-  lfi = open_memstream(&ldata, &size_of_uncompressed_label_data);
   int list_ctr = 0;
   Uint32 pix;
   int alpha_size;
@@ -12140,6 +12139,9 @@
   struct label_node *current_node;
   char *char_stream;
   size_t dat_size;
+  FILE *lfi;
+  lfi = open_memstream(&ldata, &size_of_uncompressed_label_data);
+
 
   /* Starter foreground */
   if (img_starter)
@@ -15090,7 +15092,7 @@
   SDL_BlitSurface(canvas, NULL, save_canvas, NULL);
   SDL_BlitSurface(label, NULL, save_canvas, NULL);
 
-#if !defined(WIN32) && !defined(__BEOS__) && !defined(__APPLE__)
+#if !defined(WIN32) && !defined(__BEOS__) && !defined(__APPLE__) && !defined(__HAIKU__)
   const char *pcmd;
   FILE *pi;
 
@@ -19150,6 +19152,8 @@
     int new_pos;
     int x, y, pix_size;
     Uint8 a;
+    
+    size_t max_text;
   
     /* Clear label surface */
 
@@ -19231,7 +19235,7 @@
             fscanf(lfi, "%d\n", &new_node->save_cur_font);
             new_node->save_cur_font = 0;
               
-            size_t max_text = 64;
+            max_text = 64;
             new_node->save_font_type = NULL;
             
             getline(&new_node->save_font_type, &max_text, lfi);
@@ -19711,8 +19715,8 @@
 
 void load_embedded_data(char *fname, SDL_Surface * org_surf)
 {
-  printf("Loading embedded data...\n");
-  printf("%s\n", fname);
+  png_unknown_chunkp unknowns;
+
   FILE *fi, *fp;
   char *control, *softwr;
   Bytef *unc_buff;
@@ -19721,6 +19725,7 @@
   int u;
   int have_background, have_foreground, have_label_delta, have_label_data;
   int ldelta, ldata, fgnd, bgnd;
+  int num_unknowns = 0;
   SDL_Surface *aux_surf;
 
   png_structp png_ptr;
@@ -19729,7 +19734,9 @@
   png_uint_32 ww, hh;
   png_uint_32 i, j;
 
-
+  printf("Loading embedded data...\n");
+  printf("%s\n", fname);
+  
   fp = fopen(fname, "rb");
   if (!fp)
   {
@@ -19770,9 +19777,7 @@
     ww = png_get_image_width(png_ptr, info_ptr);
     hh = png_get_image_height(png_ptr, info_ptr);
 
-    png_unknown_chunkp unknowns;
-
-    int num_unknowns = (int) png_get_unknown_chunks(png_ptr, info_ptr, &unknowns);
+    num_unknowns = (int) png_get_unknown_chunks(png_ptr, info_ptr, &unknowns);
 
     printf("num_unknowns %i\n", num_unknowns);
     if (num_unknowns)
@@ -20052,7 +20057,7 @@
 
 /////////////////////////////////////////////////////////////////////////////
 
-#if !defined(WIN32) && !defined(__APPLE__) && !defined(__BEOS__)
+#if !defined(WIN32) && !defined(__APPLE__) && !defined(__BEOS__) && !defined(__HAIKU__)
 static void show_available_papersizes(int exitcode)
 {
   FILE *fi = exitcode ? stderr : stdout;
@@ -20128,7 +20133,7 @@
 
 static void parse_argv_options(struct cfginfo *restrict tmpcfg, char *argv[])
 {
-  char *str;
+  char *str, *arg;
 
   /* FIXME: Bring back support for single-dash options:
     -c (--copying)
@@ -20157,7 +20162,7 @@
     if(str[0]=='-' && str[1]=='-' && str[2])
     {
       str += 2;
-      char *arg = strchr(str,'=');
+      arg = strchr(str,'=');
       if(arg)
         *arg++ = '\0';
       else if(argv[1] && argv[1][0]!='-')
@@ -20203,21 +20208,20 @@
 static void setup_config(char *argv[])
 {
   char str[128];
-
+  const char *home = getenv("HOME");
+  
   struct cfginfo tmpcfg_usr;
-  memset(&tmpcfg_usr, '\0', sizeof tmpcfg_usr);
-
   struct cfginfo tmpcfg_cmd;
-  memset(&tmpcfg_cmd, '\0', sizeof tmpcfg_cmd);
-
   struct cfginfo tmpcfg;
+    
+  memset(&tmpcfg_usr, '\0', sizeof tmpcfg_usr);
+  memset(&tmpcfg_cmd, '\0', sizeof tmpcfg_cmd);
   memset(&tmpcfg, '\0', sizeof tmpcfg);
-
+  
   parse_argv_options(&tmpcfg_cmd, argv);
 
   /* Set default options: */
 
-  const char *home = getenv("HOME");
   if(!home)
   {
     /* Woah, don't know where $HOME is? */
@@ -20592,17 +20596,16 @@
 
 static void do_lock_file(void)
 {
+  char *lock_fname;
+  time_t time_lock, time_now;
+  char *homedirdir;
+
   FILE *fi;
   /* Test for lockfile, if we're using one: */
 
   if (!ok_to_use_lockfile)
     return;
 
-  char *lock_fname;
-  time_t time_lock, time_now;
-  char *homedirdir;
-
-
   /* Get the current time: */
 
   time_now = time(NULL);
