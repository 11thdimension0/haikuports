diff --git a/Makefile b/Makefile
index c80378c..428aa74 100644
--- a/Makefile
+++ b/Makefile
@@ -453,7 +453,7 @@ ifeq ($(TARGET),beos)
 	$(Q)$(BEOS_SETVER) $(EXETARGET) \
                 -app $(VERSION_MAJ) $(VERSION_MIN) 0 d 0 \
                 -short "NetSurf $(VERSION_FULL)" \
-                -long "NetSurf $(VERSION_FULL) © 2003 - 2008 The NetSurf Developers"
+                -long "NetSurf $(VERSION_FULL) © 2003 - 2012 The NetSurf Developers"
 	$(VQ)echo " MIMESET: $(EXETARGET)"
 	$(Q)$(BEOS_MIMESET) $(EXETARGET)
 endif
diff --git a/beos/Makefile.target b/beos/Makefile.target
index b1d1eaa..461ecbc 100644
--- a/beos/Makefile.target
+++ b/beos/Makefile.target
@@ -9,8 +9,10 @@
   # for Haiku
   LDFLAGS += -L/boot/common/lib
   # some people do *not* have libm...
-  LDFLAGS += -lxml2 -lcurl -liconv
-  LDFLAGS += -lssl -lcrypto -lcss -ldom -lparserutils -lhubbub -lwapcaplet
+  LDFLAGS += -lssl -lcrypto -lcss
+  $(eval $(call feature_enabled,NSSVG,-DWITH_NS_SVG,-lsvgtiny,SVG (libsvgtiny)))
+  LDFLAGS += -ldom -lparserutils -lhubbub -lwapcaplet
+  LDFLAGS += -lexpat -lxml2 -lcurl -liconv
 
   CFLAGS += -I. -O $(WARNFLAGS) -Dnsbeos		\
 		-D_BSD_SOURCE -D_POSIX_C_SOURCE		\
@@ -61,9 +63,8 @@
     # cross: Haiku ?
     NETLDFLAGS := -lnetwork
   endif
-  LDFLAGS += -lbe -ltranslation $(NETLDFLAGS)
+  LDFLAGS += -lbe -ltranslation $(NETLDFLAGS) -lstdc++ -lsupc++
 
-  $(eval $(call feature_enabled,NSSVG,-DWITH_NS_SVG,-lsvgtiny,SVG (libsvgtiny)))
   ifeq ($(HOST),beos)
     CFLAGS += -I$(PREFIX)/include
     LDFLAGS += -L$(PREFIX)/lib
@@ -100,7 +101,7 @@ RDEF_IMP_BEOS := $(addprefix $(OBJROOT)/,$(subst /,_,$(RDEF_IMP_BEOS)))
 
 RDEP_BEOS := \
 	adblock.css beosdefault.css default.css internal.css quirks.css	\
-	netsurf.png ca-bundle.txt messages
+	netsurf.png ca-bundle.txt 
 RDEP_BEOS := $(addprefix beos/res/,$(RDEP_BEOS))			\
 	$(wildcard beos/res/Icons/*.png)				\
 	$(wildcard beos/res/throbber/throbber*.png)
@@ -128,7 +129,7 @@ install-beos:
 	@cp -vRL beos/res/beosdefault.css $(DESTDIR)$(NETSURF_BEOS_RESOURCES)
 	@cp -vRL gtk/res/license $(DESTDIR)$(NETSURF_BEOS_RESOURCES)
 #	@cp -vRL beos/res/throbber/*.png $(DESTDIR)$(NETSURF_BEOS_RESOURCES)throbber
-	gzip -9v < beos/res/messages > $(DESTDIR)$(NETSURF_BEOS_RESOURCES)messages 
+	$(call split_install_messages, beos, $(DESTDIR)$(NETSURF_BEOS_RESOURCES))
 
 # ----------------------------------------------------------------------------
 # Package target
diff --git a/beos/fetch_rsrc.cpp b/beos/fetch_rsrc.cpp
index 79dea4e..563f431 100644
--- a/beos/fetch_rsrc.cpp
+++ b/beos/fetch_rsrc.cpp
@@ -48,6 +48,7 @@ extern "C" {
 
 #include <image.h>
 #include <Resources.h>
+#include <String.h>
 
 struct fetch_rsrc_context {
 	struct fetch *parent_fetch;
@@ -209,8 +210,13 @@ static bool fetch_rsrc_process(struct fetch_rsrc_context *c)
 	else
 		found = gAppResources->HasResource(type, c->name);
 	if (!found) {
+		BString error("Cannot locate resource: ");
+		if (id)
+			error << id;
+		else
+			error << c->name;
 		msg.type = FETCH_ERROR;
-		msg.data.error = "Cannot locate rsrc: URL";
+		msg.data.error = error.String();
 		fetch_rsrc_send_callback(&msg, c);
 		return false;
 	}
diff --git a/beos/gui.cpp b/beos/gui.cpp
index b275616..3f7e943 100644
--- a/beos/gui.cpp
+++ b/beos/gui.cpp
@@ -450,7 +450,6 @@ static void gui_init2(int argc, char** argv)
 /** Normal entry point from OS */
 int main(int argc, char** argv)
 {
-	char buf[PATH_MAX];
 	setbuf(stderr, NULL);
 
 	BPath options;
@@ -458,12 +457,10 @@ int main(int argc, char** argv)
 		options.Append("x-vnd.NetSurf");
 	}
 
-	find_resource(buf, "messages", "./beos/res/messages");
-	LOG(("Using '%s' as Messages file", buf));
-	//messages_load(buf);
+	char* messages = "/boot/apps/netsurf/res/en/Messages";
 
 	/* initialise netsurf */
-	netsurf_init(&argc, &argv, options.Path(), buf);
+	netsurf_init(&argc, &argv, options.Path(), messages);
 
     gui_init(argc, argv);
     gui_init2(argc, argv);
@@ -553,37 +550,38 @@ void gui_init(int argc, char** argv)
 	/* check what the font settings are, setting them to a default font
 	 * if they're not set - stops Pango whinging
 	 */
+#define SETFONTDEFAULT(OPTION,y) if (nsoption_charp(OPTION) == NULL) nsoption_set_charp(OPTION, strdup((y)))
 
 	//XXX: use be_plain_font & friends, when we can check if font is serif or not.
 /*
 	font_family family;
 	font_style style;
 	be_plain_font->GetFamilyAndStyle(&family, &style);
-	nsoption_setnull_charp(font_sans, family);
-	nsoption_setnull_charp(font_serif, family);
-	nsoption_setnull_charp(font_mono, family);
-	nsoption_setnull_charp(font_cursive, family);
-	nsoption_setnull_charp(font_fantasy, family);
+	SETFONTDEFAULT(font_sans, family);
+	SETFONTDEFAULT(font_serif, family);
+	SETFONTDEFAULT(font_mono, family);
+	SETFONTDEFAULT(font_cursive, family);
+	SETFONTDEFAULT(font_fantasy, family);
 */
 #ifdef __HAIKU__
-	nsoption_setnull_charp(font_sans, "DejaVu Sans");
-	nsoption_setnull_charp(font_serif, "DejaVu Serif");
-	nsoption_setnull_charp(font_mono, "DejaVu Mono");
-	nsoption_setnull_charp(font_cursive, "DejaVu Sans");
-	nsoption_setnull_charp(font_fantasy, "DejaVu Sans");
+	SETFONTDEFAULT(font_sans, "DejaVu Sans");
+	SETFONTDEFAULT(font_serif, "DejaVu Serif");
+	SETFONTDEFAULT(font_mono, "DejaVu Mono");
+	SETFONTDEFAULT(font_cursive, "DejaVu Sans");
+	SETFONTDEFAULT(font_fantasy, "DejaVu Sans");
 #else
-	nsoption_setnull_charp(font_sans, "Bitstream Vera Sans");
-	nsoption_setnull_charp(font_serif, "Bitstream Vera Serif");
-	nsoption_setnull_charp(font_mono, "Bitstream Vera Sans Mono");
-	nsoption_setnull_charp(font_cursive, "Bitstream Vera Serif");
-	nsoption_setnull_charp(font_fantasy, "Bitstream Vera Serif");
+	SETFONTDEFAULT(font_sans, "Bitstream Vera Sans");
+	SETFONTDEFAULT(font_serif, "Bitstream Vera Serif");
+	SETFONTDEFAULT(font_mono, "Bitstream Vera Sans Mono");
+	SETFONTDEFAULT(font_cursive, "Bitstream Vera Serif");
+	SETFONTDEFAULT(font_fantasy, "Bitstream Vera Serif");
 #if 0
-	nsoption_setnull_charp(font_sans, "Swis721 BT");
-	nsoption_setnull_charp(font_serif, "Dutch801 Rm BT");
-	//nsoption_setnull_charp(font_mono, "Monospac821 BT");
-	nsoption_setnull_charp(font_mono, "Courier10 BT");
-	nsoption_setnull_charp(font_cursive, "Swis721 BT");
-	nsoption_setnull_charp(font_fantasy, "Swis721 BT");
+	SETFONTDEFAULT(font_sans, "Swis721 BT");
+	SETFONTDEFAULT(font_serif, "Dutch801 Rm BT");
+	//SETFONTDEFAULT(font_mono, "Monospac821 BT");
+	SETFONTDEFAULT(font_mono, "Courier10 BT");
+	SETFONTDEFAULT(font_cursive, "Swis721 BT");
+	SETFONTDEFAULT(font_fantasy, "Swis721 BT");
 #endif
 #endif
 
diff --git a/beos/login.cpp b/beos/login.cpp
index 32860de..90cadde 100644
--- a/beos/login.cpp
+++ b/beos/login.cpp
@@ -45,7 +45,7 @@ class LoginAlert : public BAlert {
 public:
 			LoginAlert(nserror (*callback)(bool proceed, void *pw),
 				void *callbaclpw,
-				const char *url,
+				nsurl *url,
 				const char *host,
 				const char *realm,
 				const char *text);
@@ -53,7 +53,7 @@ public:
 	void	MessageReceived(BMessage *message);
 
 private:
-	BString 	fUrl;				/**< URL being fetched */
+	nsurl*	 	fUrl;				/**< URL being fetched */
 	BString		fHost;				/**< Host for user display */
 	BString		fRealm;				/**< Authentication realm */
 	nserror		(*fCallback)(bool proceed, void *pw);
@@ -63,8 +63,8 @@ private:
 	BTextControl	*fPassControl;
 };
 
-static void create_login_window(const char *host,
-                const char *realm, const char *fetchurl,
+static void create_login_window(nsurl *host,
+                lwc_string *realm, const char *fetchurl,
                 nserror (*cb)(bool proceed, void *pw), void *cbpw);
 
 
@@ -73,7 +73,7 @@ static void create_login_window(const char *host,
 
 LoginAlert::LoginAlert(nserror (*callback)(bool proceed, void *pw),
 				void *callbackpw,
-				const char *url, 
+				nsurl *url, 
 				const char *host, 
 				const char *realm, 
 				const char *text)
@@ -140,7 +140,7 @@ LoginAlert::MessageReceived(BMessage *message)
 			break;
 		BMessage *m = new BMessage(*message);
 		m->what = 'nsLO';
-		m->AddString("URL", fUrl.String());
+		m->AddPointer("URL", fUrl);
 		m->AddString("Host", fHost.String());
 		m->AddString("Realm", fRealm.String());
 		m->AddPointer("callback", (void *)fCallback);
@@ -163,14 +163,13 @@ LoginAlert::MessageReceived(BMessage *message)
 }
 
 
-void gui_401login_open(const char *url, const char *realm,
+extern "C" void gui_401login_open(nsurl *url, const char *realm,
 		nserror (*cb)(bool proceed, void *pw), void *cbpw)
 {
-	char *host;
+	lwc_string *host;
 	url_func_result res;
 
-	res = url_host(url, &host);
-	assert(res == URL_FUNC_OK);
+	host = nsurl_get_component(url, NSURL_HOST);
 
 	create_login_window(url, host, realm, cb, cbpw);
 
@@ -179,7 +178,7 @@ void gui_401login_open(const char *url, const char *realm,
 
 //void create_login_window(struct browser_window *bw, const char *host,
 //		const char *realm, const char *fetchurl)
-static void create_login_window(const char *url, const char *host,
+static void create_login_window(nsurl *url, lwc_string *host,
                 const char *realm, nserror (*cb)(bool proceed, void *pw),
                 void *cbpw)
 {
@@ -191,8 +190,8 @@ static void create_login_window(const char *url, const char *host,
 	text << "Host:	" << host << "\n";
 	//text << "\n";
 
-	LoginAlert *a = new LoginAlert(cb, cbpw, url, host, r.String(), 
-		text.String());
+	LoginAlert *a = new LoginAlert(cb, cbpw, url, lwc_string_data(host),
+		r.String(), text.String());
 	// asynchronously
 	a->Go(NULL);
 
diff --git a/beos/res.rdef b/beos/res.rdef
index b047bd0..b41130a 100644
--- a/beos/res.rdef
+++ b/beos/res.rdef
@@ -32,6 +32,7 @@ resource(408, "throbber8.png") #'data' import "res/throbber/throbber8.png";
 /*  */
 resource(500, "credits.html") #'data' import "res/en/credits.html,faf";
 resource(501, "licence.html") #'data' import "res/en/licence.html,faf";
+resource(502, "welcome.html") #'data' import "res/en/welcome.html,faf";
 
 
 resource(1, "BEOS:APP_FLAGS") (#'APPF') $"01000000";
@@ -397,3 +398,43 @@ resource(101, "BEOS:V:STD_ICON") #'zICO' array {
 	$"7F793EDCE3F417BB10DA0B"
 };
 
+resource(102, "forward_button") #'VICN' array {
+	$"6E6369660304006603005900020006020000003C6000C000000000004C000048"
+	$"A0000080FF80FF00B300010A0748353448343E223E222C342C3422030A000100"
+	$"30222201178322040A0101001001178322040A02010000"
+};
+
+resource(103, "back_button") #'VICN' array {
+	$"6E6369660304006603005900020006020000003C6000C000000000004C000048"
+	$"A0000080FF80FF00B300010A0722353622362C482C483E363E3648030A000100"
+	$"30222201178322040A0101001001178322040A02010000"
+};
+
+resource(104, "stop_button") #'VICN' array {
+	$"6E6369660304006603800000020006020000003C6000C000000000004C000048"
+	$"A00000FFABABFFD900000208022A40402A02043525BEE325B7D825253525B7D8"
+	$"25BEE33545B7D845BEE345453545BEE345B7D8030A0002000130222201178900"
+	$"040A010200011001178900040A02020100100117850004"
+};
+
+resource(105, "reload_button") #'VICN' array {
+	$"6E6369660404006603004080020006020000003A0000C000000000004C000046"
+	$"7FFF00ABD5FFFF006CD9020006020000003A0000C000000000004C0000467FFF"
+	$"FFAAD4FF00006CD9010606C60F482232383D2D3D2D3826222A2B2329224327BC"
+	$"B7B25A4327060A00010030222201178322040A0101001001178322040A020100"
+	$"000A00010012C00000000000000000C000004AC0004AC00001178422040A0101"
+	$"0012C00000000000000000C000004AA0004AA00001178422040A03010002C000"
+	$"00000000000000C000004AA0004AA000"
+};
+
+resource(106, "home_button") #'VICN' array {
+	$"6E6369660804006603800000020006020000003A8000C000000000004C000047"
+	$"000000FFABABFFD900000554020016020000003AC000C000000000004BE00048"
+	$"A00000FFFFE50300590002000602000000370000C000000000004C00004A5000"
+	$"0080FF80FF00B20003806040040A064836483035222230223635280A04484848"
+	$"42224222480A0542404234352A283428400A042C342C4032403234080A030102"
+	$"1001178400040A040102000A0101001001178402040A020100000A0501011001"
+	$"178402040A060101000A070103000A0701030240AAAA0000000000003E000045"
+	$"0000468000"
+};
+
diff --git a/beos/scaffolding.cpp b/beos/scaffolding.cpp
index 4003b09..6389e75 100644
--- a/beos/scaffolding.cpp
+++ b/beos/scaffolding.cpp
@@ -22,7 +22,9 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+
 #include <BeBuild.h>
+#include <Box.h>
 #include <Button.h>
 #include <Dragger.h>
 #include <Menu.h>
@@ -31,6 +33,8 @@
 #include <Node.h>
 #include <Path.h>
 #include <PopUpMenu.h>
+#include <Resources.h>
+#include <Roster.h>
 #include <Screen.h>
 #include <ScrollView.h>
 #include <String.h>
@@ -38,6 +42,12 @@
 #include <TextControl.h>
 #include <View.h>
 #include <Window.h>
+
+#if defined(__HAIKU__)
+#include <IconUtils.h>
+#include "WindowStack.h"
+#endif
+
 #include <fs_attr.h>
 extern "C" {
 #include "content/content.h"
@@ -458,7 +468,7 @@ NSBaseView::MessageReceived(BMessage *message)
 			nsbeos_pipe_message_top(message, NULL, fScaffolding);
 			break;
 		default:
-		message->PrintToStream();
+			//message->PrintToStream();
 			BView::MessageReceived(message);
 	}
 }
@@ -539,6 +549,7 @@ void
 NSBaseView::AllAttached()
 {
 	BView::AllAttached();
+
 	struct beos_scaffolding *g = fScaffolding;
 	if (!g)
 		return;
@@ -576,6 +587,8 @@ NSBrowserWindow::NSBrowserWindow(BRect frame, struct beos_scaffolding *scaf)
 
 NSBrowserWindow::~NSBrowserWindow()
 {
+	if(activeWindow == this)
+		activeWindow = NULL;
 }
 
 
@@ -621,6 +634,16 @@ NSBrowserWindow::QuitRequested(void)
 }
 
 
+void
+NSBrowserWindow::WindowActivated(bool active)
+{
+	if(active)
+		activeWindow = this;
+	else if(activeWindow == this)
+		activeWindow = NULL;
+}
+
+
 // #pragma mark - implementation
 
 int32 nsbeos_replicant_main_thread(void *_arg)
@@ -686,6 +709,10 @@ void nsbeos_scaffolding_update_colors(nsbeos_scaffolding *g)
 }
 
 
+/*static*/ BWindow*
+NSBrowserWindow::activeWindow = NULL;
+
+
 void nsbeos_scaffolding_dispatch_event(nsbeos_scaffolding *scaffold, BMessage *message)
 {
 	int width, height;
@@ -907,6 +934,7 @@ void nsbeos_scaffolding_dispatch_event(nsbeos_scaffolding *scaffold, BMessage *m
 			text = scaffold->url_bar->Text();
 			scaffold->url_bar->UnlockLooper();
 
+			NSBrowserWindow::activeWindow = scaffold->window;
 			browser_window_create(text.String(), bw, NULL, false, false);
 			break;
 		}
@@ -1570,7 +1598,19 @@ void nsbeos_attach_toplevel_view(nsbeos_scaffolding *g, BView *view)
 		message->AddPointer("scaffolding", g);
 		g->window->AddShortcut('H', 0, message, view);
 
+
+#if defined(__HAIKU__)
+		// Make sure the window is layouted and answering to events, but do not
+		// show it before it is actually resized
+		g->window->Hide();
+		g->window->Show();
+
+		if(NSBrowserWindow::activeWindow) {
+			BWindowStack(NSBrowserWindow::activeWindow).AddWindow(g->window);
+		}
+#endif
 		g->window->Show();
+
 	} else {
 		if (g->top_view->Looper())
 			g->top_view->UnlockLooper();
@@ -1659,6 +1699,90 @@ static BMenuItem *make_menu_item(const char *name, BMessage *message)
 	return item;
 }
 
+
+class BBitmapButton: public BButton
+{
+	public:
+		BBitmapButton(BRect rect, const char* name, const char* label,
+			BMessage* message);
+		~BBitmapButton();
+
+		void Draw(BRect updateRect);
+		void SetBitmap(const char* attrName);
+	private:
+		BBitmap* fBitmap;
+};
+
+
+BBitmapButton::BBitmapButton(BRect rect, const char* name, const char* label,
+		BMessage* message)
+	: BButton(rect, name, label, message)
+{
+	SetBitmap(name);
+}
+
+
+BBitmapButton::~BBitmapButton()
+{
+	delete fBitmap;
+}
+
+
+void BBitmapButton::Draw(BRect updateRect)
+{
+	if(fBitmap == NULL) {
+		BButton::Draw(updateRect);
+		return;
+	}
+
+	SetDrawingMode(B_OP_COPY);
+	FillRect(updateRect, B_SOLID_LOW);
+	rgb_color color = LowColor();
+
+	SetDrawingMode(B_OP_ALPHA);
+	if(Value() != 0) {
+		// button is clicked
+		DrawBitmap(fBitmap, BPoint(1, 1));
+	} else {
+		// button is released
+		DrawBitmap(fBitmap, BPoint(0, 0));
+	}
+
+	if(!IsEnabled())
+	{
+		color.alpha = 127;
+		SetLowColor(color);
+		FillRect(updateRect, B_SOLID_LOW);
+	}
+}
+
+
+void BBitmapButton::SetBitmap(const char* attrname)
+{
+#ifdef __HAIKU__
+	size_t size = 0;
+	const void* data = BApplication::AppResources()->LoadResource('VICN', attrname, &size);
+
+	if (!data) {
+		printf("CANT LOAD RESOURCE %s\n", attrname);
+		return;
+	}
+
+	fBitmap = new BBitmap(BRect(0, 0, 32, 32), B_RGB32);
+	status_t status = BIconUtils::GetVectorIcon((const uint8*)data, size, fBitmap);
+	
+	if(status != B_OK) {
+		fprintf(stderr, "%s > oops %s\n", attrname, strerror(status));
+		delete fBitmap;
+		fBitmap = NULL;
+	}
+#else
+	// No vector icon support on BeOS. We could try to load a bitmap one
+	fBitmap = NULL;
+#endif
+}
+
+
 nsbeos_scaffolding *nsbeos_new_scaffolding(struct gui_window *toplevel)
 {
 	struct beos_scaffolding *g = (struct beos_scaffolding *)malloc(sizeof(*g));
@@ -1676,7 +1800,6 @@ nsbeos_scaffolding *nsbeos_new_scaffolding(struct gui_window *toplevel)
 
 	g->window = NULL;
 	g->menu_bar = NULL;
-	g->window = NULL;
 
 	if (replicated && !replicant_view) {
 		warn_user("Error: No subwindow allowed when replicated.", NULL);
@@ -1685,7 +1808,6 @@ nsbeos_scaffolding *nsbeos_new_scaffolding(struct gui_window *toplevel)
 
 
 	if (!replicant_view) {
-
 		BRect frame(0, 0, 600-1, 500-1);
 		if (nsoption_int(window_width) > 0) {
 			frame.Set(0, 0, nsoption_int(window_width) - 1, nsoption_int(window_height) - 1);
@@ -1696,7 +1818,7 @@ nsbeos_scaffolding *nsbeos_new_scaffolding(struct gui_window *toplevel)
 			NSBrowserWindow *win = nsbeos_find_last_window();
 			if (win) {
 				pos = win->Frame().LeftTop();
-				win->Unlock();
+				win->UnlockLooper();
 			}
 			pos += BPoint(20, 20);
 			BScreen screen;
@@ -2038,14 +2160,13 @@ nsbeos_scaffolding *nsbeos_new_scaffolding(struct gui_window *toplevel)
 	rect = g->top_view->Bounds();
 	rect.bottom = rect.top + TOOLBAR_HEIGHT - 1;
 	rect.right = rect.right - DRAGGER_WIDTH;
-	g->tool_bar = new BView(rect, "Toolbar", 
+	g->tool_bar = new BBox(rect, "Toolbar", 
 		B_FOLLOW_LEFT_RIGHT | B_FOLLOW_TOP, B_WILL_DRAW);
 	g->top_view->AddChild(g->tool_bar);
 	g->tool_bar->SetViewColor(ui_color(B_PANEL_BACKGROUND_COLOR));
 	g->tool_bar->SetLowColor(ui_color(B_PANEL_BACKGROUND_COLOR)) ;
 
 	// buttons
-#warning use BPictureButton
 	rect = g->tool_bar->Bounds();
 	rect.right = TOOLBAR_HEIGHT;
 	rect.InsetBySelf(5, 5);
@@ -2054,35 +2175,35 @@ nsbeos_scaffolding *nsbeos_new_scaffolding(struct gui_window *toplevel)
 
 	message = new BMessage('back');
 	message->AddPointer("scaffolding", g);
-	g->back_button = new BButton(rect, "back_button", "<", message);
+	g->back_button = new BBitmapButton(rect, "back_button", "<", message);
 	g->tool_bar->AddChild(g->back_button);
 	nButtons++;
 
 	rect.OffsetBySelf(TOOLBAR_HEIGHT, 0);
 	message = new BMessage('forw');
 	message->AddPointer("scaffolding", g);
-	g->forward_button = new BButton(rect, "forward_button", ">", message);
+	g->forward_button = new BBitmapButton(rect, "forward_button", ">", message);
 	g->tool_bar->AddChild(g->forward_button);
 	nButtons++;
 
 	rect.OffsetBySelf(TOOLBAR_HEIGHT, 0);
 	message = new BMessage('stop');
 	message->AddPointer("scaffolding", g);
-	g->stop_button = new BButton(rect, "stop_button", "S", message);
+	g->stop_button = new BBitmapButton(rect, "stop_button", "S", message);
 	g->tool_bar->AddChild(g->stop_button);
 	nButtons++;
 
 	rect.OffsetBySelf(TOOLBAR_HEIGHT, 0);
 	message = new BMessage('relo');
 	message->AddPointer("scaffolding", g);
-	g->reload_button = new BButton(rect, "reload_button", "R", message);
+	g->reload_button = new BBitmapButton(rect, "reload_button", "R", message);
 	g->tool_bar->AddChild(g->reload_button);
 	nButtons++;
 
 	rect.OffsetBySelf(TOOLBAR_HEIGHT, 0);
 	message = new BMessage('home');
 	message->AddPointer("scaffolding", g);
-	g->home_button = new BButton(rect, "home_button", "H", message);
+	g->home_button = new BBitmapButton(rect, "home_button", "H", message);
 	g->tool_bar->AddChild(g->home_button);
 	nButtons++;
 
@@ -2407,3 +2528,4 @@ void nsbeos_scaffolding_popup_menu(nsbeos_scaffolding *g, BPoint where)
 {
 	g->popup_menu->Go(where);
 }
+
diff --git a/beos/scaffolding.h b/beos/scaffolding.h
index ae78391..bd13230 100644
--- a/beos/scaffolding.h
+++ b/beos/scaffolding.h
@@ -61,11 +61,15 @@ virtual	~NSBrowserWindow();
 virtual	void	DispatchMessage(BMessage *message, BHandler *handler);
 virtual void	MessageReceived(BMessage *message);
 virtual bool	QuitRequested(void);
+void			WindowActivated(bool active);
 
 struct beos_scaffolding *Scaffolding() const { return fScaffolding; };
 
+static BWindow* activeWindow;
 private:
 	struct beos_scaffolding *fScaffolding;
+
+
 };
 
 
diff --git a/beos/window.cpp b/beos/window.cpp
index 253b5d1..729d7b1 100644
--- a/beos/window.cpp
+++ b/beos/window.cpp
@@ -131,7 +131,7 @@ static GdkCursor *nsbeos_create_menu_cursor(void);
 
 NSBrowserFrameView::NSBrowserFrameView(BRect frame, struct gui_window *gui)
 	: BView(frame, "NSBrowserFrameView", B_FOLLOW_ALL_SIDES, 
-		B_WILL_DRAW | B_NAVIGABLE | B_FRAME_EVENTS /*| B_SUBPIXEL_PRECISE*/),
+		B_WILL_DRAW | B_NAVIGABLE | B_FRAME_EVENTS ),
 	fGuiWindow(gui)
 {
 }
@@ -756,18 +756,25 @@ void nsbeos_dispatch_event(BMessage *message)
 			break;
 		case 'nsLO': // login
 		{
-			BString url;
+			nsurl* url;
 			BString realm;
 			BString auth;
-			if (message->FindString("URL", &url) < B_OK)
+			void* cbpw;
+			nserror (*cb)(bool proceed, void* pw);
+
+			if (message->FindPointer("URL", (void**)&url) < B_OK)
 				break;
 			if (message->FindString("Realm", &realm) < B_OK)
 				break;
 			if (message->FindString("Auth", &auth) < B_OK)
 				break;
+			if (message->FindPointer("callback", (void**)&cb) < B_OK)
+				break;
+			if (message->FindPointer("callback_pw", (void**)&cbpw) < B_OK)
+				break;
 			//printf("login to '%s' with '%s'\n", url.String(), auth.String());
-			urldb_set_auth_details(url.String(), realm.String(), auth.String());
-			browser_window_go(gui->bw, url.String(), 0, true);
+			urldb_set_auth_details(url, realm.String(), auth.String());
+			cb(true, cbpw);
 			break;
 		}
 		default:
@@ -926,11 +933,44 @@ void nsbeos_window_keypress_event(BView *view, gui_window *g, BMessage *event)
 		nskey = utf8_to_ucs4(bytes, numbytes);
 	}
 
-	bool done = browser_window_key_press(g->bw, nskey);
-	LOG(("nskey %d %d", nskey, done));
-	//if (browser_window_key_press(g->bw, nskey))
+	if(browser_window_key_press(g->bw, nskey))
 		return;
-	
+
+	// Remaining events are for scrolling the page around
+	float hdelta = 0.0f, vdelta = 0.0f;
+	g->view->LockLooper();
+	BRect size = g->view->Bounds();
+	switch (byte) {
+		case B_HOME:
+			g->view->ScrollTo(0.0f, 0.0f);
+			break;
+		case B_END:
+		{
+			// TODO
+			break;
+		}
+		case B_PAGE_UP:
+			vdelta = -size.Height();
+			break;
+		case B_PAGE_DOWN:
+			vdelta = size.Height();
+			break;
+		case B_LEFT_ARROW:
+			hdelta = -10;
+			break;
+		case B_RIGHT_ARROW:
+			hdelta = 10;
+			break;
+		case B_UP_ARROW:
+			vdelta = -10;
+			break;
+		case B_DOWN_ARROW:
+			vdelta = 10;
+			break;
+	}
+
+	g->view->ScrollBy(hdelta, vdelta);
+	g->view->UnlockLooper();
 }
 
 #warning WRITEME
@@ -1674,7 +1714,7 @@ bool gui_add_to_clipboard(const char *text, size_t length, bool space,
 	BFont font;
 	text_run *run = new text_run;
 
-	nsbeos_style_to_font(font, &fstyle);
+	nsbeos_style_to_font(font, fstyle);
 	run->offset = current_selection.Length();
 	run->font = font;
 	run->color = nsbeos_rgb_colour(fstyle->foreground);
diff --git a/utils/config.h b/utils/config.h
index bd2e303..1c1eef6 100644
--- a/utils/config.h
+++ b/utils/config.h
@@ -24,14 +24,14 @@
 
 /* Try to detect which features the target OS supports */
 
-#if (defined(_GNU_SOURCE) && !defined(__APPLE__))
+#if (defined(_GNU_SOURCE) && !defined(__APPLE__) || defined(__HAIKU__))
 #define HAVE_STRNDUP
 #else
 #undef HAVE_STRNDUP
 char *strndup(const char *s, size_t n);
 #endif
 
-#if (defined(_GNU_SOURCE) || defined(__APPLE__))
+#if (defined(_GNU_SOURCE) || defined(__APPLE__) || defined(__HAIKU__))
 #define HAVE_STRCASESTR
 #else
 #undef HAVE_STRCASESTR
